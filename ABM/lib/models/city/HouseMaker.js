// Generated by CoffeeScript 1.7.1
var HouseMaker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

HouseMaker = (function(_super) {
  __extends(HouseMaker, _super);

  HouseMaker.breed_name = 'houseMakers';

  HouseMaker.breed = null;

  HouseMaker.color = [255, 0, 0];

  HouseMaker.size = 1;

  HouseMaker.agentSet = function() {
    var breed, _i, _len, _ref;
    if (this.breed == null) {
      _ref = ABM.agents.breeds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        breed = _ref[_i];
        if (breed.name === this.breed_name) {
          this.breed = breed;
          break;
        }
      }
    }
    return this.breed;
  };

  HouseMaker.makeNew = function(x, y) {
    var house_maker;
    house_maker = new HouseMaker(x, y, this.color, 1);
    this.agentSet().add(house_maker);
    return house_maker;
  };

  function HouseMaker(x, y, color, size) {
    this.color = color;
    this.size = size;
    HouseMaker.__super__.constructor.apply(this, arguments);
    this.setXY(x, y);
  }

  HouseMaker.prototype.step = function() {
    var near_patches, patch, _i, _j, _len, _len1, _results;
    near_patches = ABM.util.shuffle(this.p.n);
    for (_i = 0, _len = near_patches.length; _i < _len; _i++) {
      patch = near_patches[_i];
      if (!House.isHouseHere(patch) && !Road.isRoadHere(patch)) {
        this.placeHouse(patch);
        break;
      }
    }
    near_patches = ABM.util.shuffle(this.p.n4);
    _results = [];
    for (_j = 0, _len1 = near_patches.length; _j < _len1; _j++) {
      patch = near_patches[_j];
      if (Road.isRoadHere(patch)) {
        this.move(patch);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  HouseMaker.prototype.placeHouse = function(patch) {
    return House.makeHere(patch);
  };

  HouseMaker.prototype.inPoint = function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  };

  HouseMaker.prototype.move = function(point) {
    if ((this.local_point == null) || this.inPoint(this.local_point)) {
      this.local_point = this.getLocalPoint(point);
    }
    this.facePoint(this.local_point);
    return this.forward(0.1);
  };

  HouseMaker.prototype.getLocalPoint = function(point) {
    var dx, dy, heading;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.round(Math.atan2(dy, dx) / (Math.PI / 2));
    switch (false) {
      case heading !== 0:
        return {
          x: this.p.x + 1,
          y: this.p.y
        };
      case heading !== 1:
        return {
          x: this.p.x,
          y: this.p.y + 1
        };
      case heading !== -1:
        return {
          x: this.p.x,
          y: this.p.y - 1
        };
      case !(heading === 2 || heading === -2):
        return {
          x: this.p.x - 1,
          y: this.p.y
        };
    }
  };

  HouseMaker.prototype.facePoint = function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  };

  return HouseMaker;

})(ABM.Agent);
