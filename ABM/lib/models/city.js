// Generated by CoffeeScript 1.7.0
var MyModel, model, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = ABM.util;

MyModel = (function(_super) {
  __extends(MyModel, _super);

  function MyModel() {
    return MyModel.__super__.constructor.apply(this, arguments);
  }

  MyModel.prototype.setup = function() {
    var p, patch, _i, _len, _ref;
    this.patchBreeds("city_hall");
    this.agentBreeds("roadMakers roads");
    this.anim.setRate(30, false);
    this.roads.setDefault("color", [0, 0, 255]);
    this.roads.setDefault("shape", "circle");
    this.roads.setDefault("size", 0.3);
    this.links.setDefault("labelColor", [255, 0, 0]);
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.color = u.randomGray();
    }
    this.city_hall = this.createCityHall(0, 0);
    patch = u.oneOf(this.city_hall.p.n);
    return this.createRoadMaker(patch.x, patch.y);
  };

  MyModel.prototype.step = function() {
    var a, _i, _len, _ref, _results;
    if (this.anim.ticks % 100 === 0) {
      console.log(this.anim.toString());
    }
    _ref = this.roadMakers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      a.rotate(u.randomCentered(u.degToRad(30)));
      a.forward(0.1);
      if (!this.patchHasRoad(a.p)) {
        _results.push(this.dropRoad(a));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  MyModel.prototype.patchHasRoad = function(patch) {
    var agent, _i, _len, _ref;
    _ref = patch.agentsHere();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      agent = _ref[_i];
      if (agent.breed === this.roads) {
        return true;
      }
    }
  };

  MyModel.prototype.dropRoad = function(agent) {
    var road;
    road = (agent.p.sprout(1, this.roads))[0];
    if (agent.previous_node != null) {
      this.links.create(road, agent.previous_node);
    }
    return agent.previous_node = road;
  };

  MyModel.prototype.createCityHall = function(x, y) {
    var agent;
    agent = (this.agents.create(1))[0];
    agent.setXY(x, y);
    agent.color = [255, 0, 0];
    agent.shape = "square";
    agent.size = 1;
    return agent;
  };

  MyModel.prototype.createRoadMaker = function(x, y) {
    var agent;
    agent = (this.roadMakers.create(1))[0];
    agent.setXY(x, y);
    agent.color = [0, 255, 0];
    agent.size = 1;
    return agent.previous_node = null;
  };

  return MyModel;

})(ABM.Model);

model = new MyModel("layers", 16, -16, 16, -16, 16);

model.debug();

model.start();
