// Generated by CoffeeScript 1.7.1
var Inspector, Inspector_instance_properties;

Inspector = (function() {
  function Inspector() {}

  Inspector.inspectors = null;

  Inspector.default_color = [0, 0, 255];

  Inspector.radius_increment = 3;

  Inspector.initialize_module = function(inspectors_breed) {
    this.inspectors = inspectors_breed;
    return this.inspectors.setDefault('color', this.default_color);
  };

  Inspector.spawn_inspector = function(patch) {
    var inspector;
    inspector = patch.sprout(1, this.inspectors)[0];
    extend(inspector, Inspector_instance_properties);
    inspector.init();
    return inspector;
  };

  return Inspector;

})();

Inspector_instance_properties = {
  current_message: null,
  current_state: null,
  nodes_under_investigation: [],
  init: function() {
    this.current_state = this.get_message_state;
    return this.msg_boards = {
      inspect: MessageBoard.get_reader('inspect_endpoint'),
      connect: MessageBoard.get_reader('connect_nodes')
    };
  },
  step: function() {
    return this.current_state();
  },
  get_message_state: function() {
    this.current_message = this.msg_boards.inspect.get_message();
    if (this.current_message != null) {
      this.path = CityModel.instance.roadAStar.getPath(this, this.current_message.patch);
      return this.current_state = this.go_to_endpoint_state;
    }
  },
  go_to_endpoint_state: function() {
    this.move(this.path[0]);
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.nodes_under_investigation = this._get_close_nodes();
        return this.current_state = this.inspect_endpoint_state;
      }
    }
  },
  inspect_endpoint_state: function() {
    this._inspect_node(this.nodes_under_investigation.shift());
    if (this.nodes_under_investigation.length === 0) {
      this.current_message = null;
      return this.current_state = this.get_message_state;
    }
  },
  _inspect_node: function(node) {
    var factor, real_dist, road_dist;
    real_dist = this.distance(node);
    road_dist = Road.get_road_distance(this, node);
    factor = road_dist / real_dist;
    if (factor > 4) {
      return this.msg_boards.connect.post_message({
        node_a: this.p.node,
        node_b: node
      });
    }
  },
  move: function(point) {
    this.face_point(point);
    return this.forward(0.05);
  },
  face_point: function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  },
  in_point: function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  },
  _get_close_nodes: function() {
    return RoadNode.road_nodes.inRadius(this.p.node, 10);
  }
};
