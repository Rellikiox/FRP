// Generated by CoffeeScript 1.7.1
var CityModel, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

u = ABM.util;

CityModel = (function(_super) {
  __extends(CityModel, _super);

  function CityModel() {
    return CityModel.__super__.constructor.apply(this, arguments);
  }

  CityModel.modules = [];

  CityModel.agent_breeds_names = "";

  CityModel.patch_breeds_names = "";

  CityModel.register_module = function(klass, agents, patches) {
    var module;
    module = {
      klass: klass,
      agent_breeds: agents,
      patch_breeds: patches
    };
    this.modules.push(module);
    return this.load_module(module);
  };

  CityModel.load_module = function(module) {
    var breed_name, _i, _j, _len, _len1, _ref, _ref1;
    _ref = module.agent_breeds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      breed_name = _ref[_i];
      this.agent_breeds_names += " " + breed_name;
    }
    _ref1 = module.patch_breeds;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      breed_name = _ref1[_j];
      this.patch_breeds_names += " " + breed_name;
    }
    this.agent_breeds_names.trim();
    return this.patch_breeds_names.trim();
  };

  CityModel.instance = null;

  CityModel.log = function(msg) {
    var _ref;
    if ((_ref = this.instance) != null ? _ref.debugging : void 0) {
      return console.log(msg);
    }
  };

  CityModel.debug_info = function() {
    var _ref;
    return (_ref = this.instance) != null ? _ref.config.debug : void 0;
  };

  CityModel.get_patch_at = function(point) {
    return this.instance.patches.patchXY(Math.round(point.x), Math.round(point.y));
  };

  CityModel.is_on_world = function(point) {
    return this.instance.patches.isOnWorld(Math.round(point.x), Math.round(point.y));
  };

  CityModel.link_agents = function(agent_a, agent_b) {
    return this.instance.links.create(agent_a, agent_b);
  };

  CityModel.set_road_nav_patch_walkable = function(patch, walkable) {
    if (walkable == null) {
      walkable = true;
    }
    return CityModel.instance.roadAStar.setWalkable(patch, walkable);
  };

  CityModel.set_terrain_nav_patch_walkable = function(patch, walkable) {
    if (walkable == null) {
      walkable = true;
    }
    return CityModel.instance.terrainAStar.setWalkable(patch, walkable);
  };

  CityModel.get_patches = function() {
    var _ref;
    return (_ref = this.instance) != null ? _ref.patches : void 0;
  };

  CityModel.transformSeed = function(seed) {
    var i, value, _i, _ref;
    value = 0;
    for (i = _i = 0, _ref = seed.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      value += seed.charCodeAt(i);
    }
    return value;
  };

  CityModel.prototype.reset = function(config, start) {
    this.config = config;
    CityModel.__super__.reset.call(this, start);
    ABM.util.randomSeed(CityModel.transformSeed(this.config.seed));
    this.set_default_params();
    this.initialize_modules();
    CityModel.instance = this;
    this.set_up_AStar_helpers();
    this.init_patches();
    return this.spawn_entities();
  };

  CityModel.prototype.setup = function() {};

  CityModel.prototype.step = function() {
    var agent, _i, _ref, _results;
    _ref = this.agents;
    _results = [];
    for (_i = _ref.length - 1; _i >= 0; _i += -1) {
      agent = _ref[_i];
      _results.push(typeof agent.step === "function" ? agent.step() : void 0);
    }
    return _results;
  };

  CityModel.prototype.save = function() {
    return "" + this.config.seed + ":" + this.anim.ticks;
  };

  CityModel.prototype.update_debug_config = function(debug_config) {
    var agent, _i, _len, _ref, _results;
    this.config.debug = debug_config;
    this.set_agent_debug_info();
    _ref = this.agents;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      agent = _ref[_i];
      _results.push(typeof agent.update_label === "function" ? agent.update_label() : void 0);
    }
    return _results;
  };

  CityModel.prototype.initialize_modules = function() {
    var module, _i, _len, _ref, _results;
    _ref = CityModel.modules;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      _results.push(this.initialize_module(module));
    }
    return _results;
  };

  CityModel.prototype.initialize_module = function(module) {
    var breed_name, breeds, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    breeds = [];
    _ref = module.agent_breeds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      breed_name = _ref[_i];
      breeds.push(this[breed_name]);
    }
    _ref1 = module.patch_breeds;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      breed_name = _ref1[_j];
      breeds.push(this[breed_name]);
    }
    return (_ref2 = module.klass).initialize.apply(_ref2, __slice.call(breeds).concat([this.config]));
  };

  CityModel.prototype.create_city_hall = function(x, y) {
    var patch;
    patch = this.patches.patchXY(x, y);
    patch.color = patch.default_color = [0, 0, 100];
    patch.dist_to_city_hall = 0;
    return patch;
  };

  CityModel.prototype.set_default_params = function() {
    this.patchBreeds(CityModel.patch_breeds_names);
    this.agentBreeds(CityModel.agent_breeds_names);
    this.anim.setRate(120, false);
    this.refreshPatches = true;
    this.draw_mode = "normal";
    return this.set_agent_debug_info();
  };

  CityModel.prototype.set_agent_debug_info = function() {
    var key, value, _ref, _results;
    _ref = this.config.debug.agents;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      _results.push(this.agents.setDefault(key, value));
    }
    return _results;
  };

  CityModel.prototype.spawn_entities = function() {
    var patch, _i, _j, _len, _len1, _ref, _ref1;
    this.city_hall = this.create_city_hall(0, 0);
    _ref = this.city_hall.n4;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      Road.set_breed(patch, 1);
    }
    _ref1 = this.city_hall.n;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      patch = _ref1[_j];
      if (!(patch.breed === this.roads)) {
        Road.set_breed(patch, 2);
      }
    }
    this.spawn_house_makers(0);
    this.spawn_inspectors(1);
    return this.spawn_planners(1);
  };

  CityModel.prototype.spawn_road_makers = function(ammount) {
    var i, patch, _results;
    i = 0;
    _results = [];
    while (i < ammount) {
      patch = u.oneOf(this.city_hall.n4);
      RoadBuilder.spawn_road_maker(patch);
      _results.push(i += 1);
    }
    return _results;
  };

  CityModel.prototype.spawn_house_makers = function(ammount) {
    var i, patch, _results;
    i = 0;
    _results = [];
    while (i < ammount) {
      patch = u.oneOf(this.city_hall.n4);
      HouseBuilder.spawn_house_maker(patch);
      _results.push(i += 1);
    }
    return _results;
  };

  CityModel.prototype.spawn_inspectors = function(ammount) {
    var i, patch, _results;
    i = 0;
    _results = [];
    while (i < ammount) {
      patch = u.oneOf(this.city_hall.n4);
      Inspector.spawn_node_inspector(patch);
      Inspector.spawn_road_inspector(patch);
      Inspector.spawn_plot_inspector(patch);
      _results.push(i += 1);
    }
    return _results;
  };

  CityModel.prototype.spawn_planners = function(ammount) {
    var i, _results;
    i = 0;
    _results = [];
    while (i < ammount) {
      Planner.spawn_road_planner();
      Planner.spawn_node_planner();
      Planner.spawn_growth_planner();
      Planner.spawn_plot_planner();
      Planner.spawn_housing_planner();
      Planner.spawn_plot_keeper_planner();
      Planner.spawn_bulldozer_planner();
      Planner.spawn_needs_planner();
      _results.push(i += 1);
    }
    return _results;
  };

  CityModel.prototype.set_up_AStar_helpers = function() {
    var height, width, x_to_grid_transform, x_to_world_transform, y_to_grid_transform, y_to_world_transform;
    width = (this.world.maxX - this.world.minX) + 1;
    height = (this.world.maxY - this.world.minY) + 1;
    x_to_grid_transform = (function(_this) {
      return function(x) {
        return x - _this.world.minX;
      };
    })(this);
    y_to_grid_transform = (function(_this) {
      return function(y) {
        return -y - _this.world.minY;
      };
    })(this);
    x_to_world_transform = (function(_this) {
      return function(x) {
        return x + _this.world.minX;
      };
    })(this);
    y_to_world_transform = (function(_this) {
      return function(y) {
        return -(y + _this.world.minY);
      };
    })(this);
    this.roadAStar = new AStarHelper(width, height, false);
    this.roadAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    this.roadAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
    this.terrainAStar = new AStarHelper(width, height, true);
    this.terrainAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    return this.terrainAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
  };

  CityModel.prototype.init_patches = function() {
    var b, g, p, r, _i, _len, _ref, _ref1, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.color = u.randomGray(100, 150);
      _ref1 = p.color, r = _ref1[0], g = _ref1[1], b = _ref1[2];
      p.color = [r, g * 2, b];
      _results.push(p.default_color = p.color);
    }
    return _results;
  };

  return CityModel;

})(ABM.Model);
