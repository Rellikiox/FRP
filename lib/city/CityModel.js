// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  paths: {
    'agentscript': 'agentscript/agentscript'
  },
  shim: {
    'agentscript': {
      exports: 'ABM'
    }
  }
});

define(['agentscript', 'city/Inspectors', 'city/Planners', 'city/Roads', 'city/RoadNodes'], function(ABM, InspectorManager, PlannerManager, RoadManager, RoadNodeManager) {
  var CityModel;
  console.log("Loaded city/CityModel.coffee");
  return CityModel = (function(_super) {
    __extends(CityModel, _super);

    CityModel.instance = null;

    CityModel.get_patch_at = function(point) {
      return this.instance.patches.patchXY(Math.round(point.x), Math.round(point.y));
    };

    CityModel.is_on_world = function(point) {
      return this.instance.patches.isOnWorld(Math.round(point.x), Math.round(point.y));
    };

    CityModel.link_agents = function(agent_a, agent_b) {
      return this.instance.links.create(agent_a, agent_b);
    };

    function CityModel() {
      this.agent_breeds = [];
      this.patch_breeds = [];
      CityModel.instance = this;
      CityModel.__super__.constructor.apply(this, arguments);
    }

    CityModel.prototype.setup = function() {
      this.set_default_params();
      this.initialize_modules();
      return this.init_patches();
    };

    CityModel.prototype.step = function() {
      var agent, _i, _ref, _results;
      _ref = this.agents;
      _results = [];
      for (_i = _ref.length - 1; _i >= 0; _i += -1) {
        agent = _ref[_i];
        _results.push(agent.step());
      }
      return _results;
    };

    CityModel.prototype.initialize_modules = function() {
      this.agent_breeds = ['inspectors', 'planners', 'road_nodes'];
      this.initialize_breeds();
      this.road_node_manager = new RoadNodeManager(this['road_nodes']);
      this.inspector_manager = new InspectorManager(this['inspectors']);
      return this.planner_manager = new PlannerManager(this['planners']);
    };

    CityModel.prototype.initialize_breeds = function() {
      this.patchBreeds(this.patch_breeds.join(' '));
      return this.agentBreeds(this.agent_breeds.join(' '));
    };

    CityModel.prototype.create_city_hall = function(x, y) {
      var patch;
      patch = this.patches.patchXY(x, y);
      patch.color = patch.default_color = [0, 0, 100];
      patch.dist_to_city_hall = 0;
      return patch;
    };

    CityModel.prototype.set_default_params = function() {
      this.patchBreeds("roads houses");
      this.agentBreeds("road_makers house_makers road_nodes inspectors planners");
      this.anim.setRate(120, false);
      this.refreshPatches = true;
      return this.draw_mode = "normal";
    };

    CityModel.prototype.spawn_entities = function() {
      var patch, _i, _j, _len, _len1, _ref, _ref1;
      this.city_hall = this.create_city_hall(0, 0);
      _ref = this.city_hall.n4;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        patch = _ref[_i];
        Road.set_breed(patch, 1);
      }
      _ref1 = this.city_hall.n;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        patch = _ref1[_j];
        if (!(patch.breed === this.roads)) {
          Road.set_breed(patch, 2);
        }
      }
      this.spawn_inspectors(1);
      return this.spawn_planners(1);
    };

    CityModel.prototype.spawn_road_makers = function(ammount) {
      var i, patch, _results;
      i = 0;
      _results = [];
      while (i < ammount) {
        patch = ABM.util.oneOf(this.city_hall.n4);
        RoadMaker.spawn_road_maker(patch);
        _results.push(i += 1);
      }
      return _results;
    };

    CityModel.prototype.spawn_house_makers = function(ammount) {
      var i, patch, _results;
      i = 0;
      _results = [];
      while (i < ammount) {
        patch = ABM.util.oneOf(this.city_hall.n4);
        HouseMaker.spawn_house_maker(patch);
        _results.push(i += 1);
      }
      return _results;
    };

    CityModel.prototype.spawn_inspectors = function(ammount) {
      var i, patch, _results;
      i = 0;
      _results = [];
      while (i < ammount) {
        patch = ABM.util.oneOf(this.city_hall.n4);
        Inspector.spawn_node_inspector(patch);
        Inspector.spawn_road_inspector(patch);
        _results.push(i += 1);
      }
      return _results;
    };

    CityModel.prototype.spawn_planners = function(ammount) {
      var i, _results;
      i = 0;
      _results = [];
      while (i < ammount) {
        Planner.spawn_road_planner();
        Planner.spawn_node_planner();
        _results.push(i += 1);
      }
      return _results;
    };

    CityModel.prototype.set_up_AStar_helpers = function() {
      var height, width, x_to_grid_transform, x_to_world_transform, y_to_grid_transform, y_to_world_transform;
      width = this.world.maxX - this.world.minX;
      height = this.world.maxY - this.world.minY;
      x_to_grid_transform = (function(_this) {
        return function(x) {
          return x - _this.world.minX;
        };
      })(this);
      y_to_grid_transform = (function(_this) {
        return function(y) {
          return -y - _this.world.minY;
        };
      })(this);
      x_to_world_transform = (function(_this) {
        return function(x) {
          return x + _this.world.minX;
        };
      })(this);
      y_to_world_transform = (function(_this) {
        return function(y) {
          return -(y + _this.world.minY);
        };
      })(this);
      this.roadAStar = new AStarHelper(width, height, false);
      this.roadAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
      this.roadAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
      this.terrainAStar = new AStarHelper(width, height, true);
      this.terrainAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
      return this.terrainAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
    };

    CityModel.prototype.init_patches = function() {
      var b, g, p, r, _i, _len, _ref, _ref1, _results;
      _ref = this.patches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.color = ABM.util.randomGray(100, 150);
        _ref1 = p.color, r = _ref1[0], g = _ref1[1], b = _ref1[2];
        p.color = [r, g * 2, b];
        _results.push(p.default_color = p.color);
      }
      return _results;
    };

    CityModel.prototype.set_draw_mode = function(mode) {
      return this.draw_mode = mode;
    };

    CityModel.prototype.draw_normal_color = function() {
      var patch, _i, _len, _ref, _results;
      _ref = this.patches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        patch = _ref[_i];
        if (patch.breed.name === "patches") {
          _results.push(patch.color = patch.default_color);
        }
      }
      return _results;
    };

    CityModel.prototype.draw_connectivity_color = function() {
      var patch, _i, _len, _ref, _results;
      _ref = this.patches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        patch = _ref[_i];
        if (patch.breed.name === "patches") {
          _results.push(patch.color = patch.connectivity_color != null ? patch.connectivity_color : patch.color);
        }
      }
      return _results;
    };

    return CityModel;

  })(ABM.Model);
});
