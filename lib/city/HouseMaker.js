// Generated by CoffeeScript 1.7.1
var HouseMaker;

HouseMaker = (function() {
  function HouseMaker() {}

  HouseMaker.house_makers = null;

  HouseMaker.default_color = [255, 0, 0];

  HouseMaker.initialize_module = function(house_makers_breed) {
    this.house_makers = house_makers_breed;
    return this.house_makers.setDefault('color', this.default_color);
  };

  HouseMaker.spawn_house_maker = function(patch) {
    var house_maker;
    house_maker = patch.sprout(1, this.house_makers)[0];
    extend(house_maker, HouseMaker.prototype);
    return house_maker;
  };

  HouseMaker.prototype.step = function() {
    var near_patches, patch, _i, _j, _len, _len1, _results;
    near_patches = ABM.util.shuffle(this.p.n);
    for (_i = 0, _len = near_patches.length; _i < _len; _i++) {
      patch = near_patches[_i];
      if (!House.isHouseHere(patch) && !Road.is_road(patch)) {
        this.placeHouse(patch);
        break;
      }
    }
    near_patches = ABM.util.shuffle(this.p.n4);
    _results = [];
    for (_j = 0, _len1 = near_patches.length; _j < _len1; _j++) {
      patch = near_patches[_j];
      if (Road.is_road(patch)) {
        this.move(patch);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  HouseMaker.prototype.placeHouse = function(patch) {
    return House.set_breed(patch);
  };

  HouseMaker.prototype.inPoint = function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  };

  HouseMaker.prototype.move = function(point) {
    if ((this.local_point == null) || this.inPoint(this.local_point)) {
      this.local_point = this.getLocalPoint(point);
    }
    this.facePoint(this.local_point);
    return this.forward(0.05);
  };

  HouseMaker.prototype.getLocalPoint = function(point) {
    var dx, dy, heading;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.round(Math.atan2(dy, dx) / (Math.PI / 2));
    switch (false) {
      case heading !== 0:
        return {
          x: this.p.x + 1,
          y: this.p.y
        };
      case heading !== 1:
        return {
          x: this.p.x,
          y: this.p.y + 1
        };
      case heading !== -1:
        return {
          x: this.p.x,
          y: this.p.y - 1
        };
      case !(heading === 2 || heading === -2):
        return {
          x: this.p.x - 1,
          y: this.p.y
        };
    }
  };

  HouseMaker.prototype.facePoint = function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  };

  return HouseMaker;

})();
