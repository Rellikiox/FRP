// Generated by CoffeeScript 1.7.1
define([], function() {
  var RoadManager, RoadNode, RoadNodeManager;
  console.log("Loaded city/RoadNodes.coffee");
  RoadManager = null;
  RoadNodeManager = (function() {
    RoadNodeManager.prototype.default_color = [160, 160, 160];

    function RoadNodeManager(road_nodes, road_manager) {
      this.road_nodes = road_nodes;
      RoadManager = road_manager;
      this.road_nodes.setDefault('color', this.default_color);
      this.road_nodes.setDefault('shape', 'circle');
      this.road_nodes.setDefault('size', 0.4);
    }

    RoadNodeManager.prototype.check_patch = function(patch) {
      return Road.is_road(patch) && (patch.node == null);
    };

    RoadNodeManager.prototype.spawn_node = function(patch) {
      var node;
      node = RoadNode._make_node(patch);
      RoadNode._prepare_neighbour_roads(patch);
      node.connect();
      return node;
    };

    RoadNodeManager.prototype.split_link_at = function(road) {
      var node, node_a, node_b, _ref;
      _ref = RoadNode._get_nodes_connecting(road), node_a = _ref[0], node_b = _ref[1];
      RoadNode._remove_link_between(node_a, node_b);
      node = RoadNode._make_node(road);
      node.creating = false;
      CityModel.link_agents(node_a, node);
      return CityModel.link_agents(node, node_b);
    };

    RoadNodeManager.prototype._make_node = function(road) {
      var new_node;
      new_node = road.sprout(1, this.road_nodes)[0];
      extend(new_node, RoadNode.prototype);
      road.node = new_node;
      return new_node;
    };

    RoadNodeManager.prototype._prepare_neighbour_roads = function(road) {
      var n_road, _i, _len, _ref, _results;
      _ref = road.n4;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n_road = _ref[_i];
        if (Road.is_road(n_road) && (n_road.node == null)) {
          _results.push(RoadNode.split_link_at(n_road));
        }
      }
      return _results;
    };

    RoadNodeManager.prototype._get_nodes_connecting = function(road) {
      var a_dir, b_dir, neighbour_roads, road_a, road_b, _ref, _ref1;
      neighbour_roads = Road._get_road_neighbours(road);
      _ref = this._get_aligned_patches(neighbour_roads), road_a = _ref[0], road_b = _ref[1];
      _ref1 = this._get_direction(road_a, road_b), a_dir = _ref1[0], b_dir = _ref1[1];
      while (road_a.node == null) {
        road_a = this._get_neighbour_with_offset(road_a, a_dir);
      }
      while (road_b.node == null) {
        road_b = this._get_neighbour_with_offset(road_b, b_dir);
      }
      return [road_a.node, road_b.node];
    };

    RoadNodeManager.prototype._get_aligned_patches = function(patches) {
      if (this._are_aligned(patches[0], patches[1])) {
        return [patches[0], patches[1]];
      } else if (this._are_aligned(patches[1], patches[2])) {
        return [patches[1], patches[2]];
      } else {
        return [patches[0], patches[2]];
      }
    };

    RoadNodeManager.prototype._are_aligned = function(patch_a, patch_b) {
      return patch_a.x === patch_b.x || patch_a.y === patch_b.y;
    };

    RoadNodeManager.prototype._get_direction = function(patch_a, patch_b) {
      var dx, dy;
      dx = (patch_a.x - patch_b.x) / 2;
      dy = (patch_a.y - patch_b.y) / 2;
      return [
        {
          x: dx,
          y: dy
        }, {
          x: -dx,
          y: -dy
        }
      ];
    };

    RoadNodeManager.prototype._get_neighbour_with_offset = function(patch, offset) {
      var n, _i, _len, _ref;
      _ref = patch.n4;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (n.x === patch.x + offset.x && n.y === patch.y + offset.y) {
          return n;
        }
      }
    };

    RoadNodeManager.prototype._remove_link_between = function(node_a, node_b) {
      var link, _i, _len, _ref;
      _ref = node_a.myLinks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        if (link.otherEnd(node_a) === node_b) {
          link.die();
        }
      }
      return null;
    };

    return RoadNodeManager;

  })();
  RoadNode = (function() {
    function RoadNode() {}

    RoadNode.prototype.creating = true;

    RoadNode.prototype.step = function() {};

    RoadNode.prototype.connect = function() {
      if (this._any_neighbours_nodes()) {
        this._connect_to_neighbours();
        this._smooth_neighbours();
      }
      return this.creating = false;
    };

    RoadNode.prototype._connect_to_neighbours = function() {
      var neighbour_nodes, node, _i, _len, _results;
      neighbour_nodes = this._get_node_neighbours();
      _results = [];
      for (_i = 0, _len = neighbour_nodes.length; _i < _len; _i++) {
        node = neighbour_nodes[_i];
        _results.push(CityModel.link_agents(this, node));
      }
      return _results;
    };

    RoadNode.prototype._any_neighbours_nodes = function() {
      return this._get_node_neighbours().length > 0;
    };

    RoadNode.prototype._smooth_neighbours = function() {
      var node, nodes, _i, _len, _results;
      nodes = this._get_node_neighbours();
      nodes.push(this);
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        _results.push(node._smooth_node());
      }
      return _results;
    };

    RoadNode.prototype._get_node_neighbours = function() {
      var patch;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.p.n4;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          patch = _ref[_i];
          if (patch.node != null) {
            _results.push(patch.node);
          }
        }
        return _results;
      }).call(this);
    };

    RoadNode.prototype._is_aligned_with = function(node) {
      return this.p.x === node.p.x || this.p.y === node.p.y;
    };

    RoadNode.prototype._smooth_node = function() {
      var neighbours, node_a, node_b;
      neighbours = this.linkNeighbors();
      if (neighbours.length === 2) {
        node_a = neighbours[0], node_b = neighbours[1];
        if (node_a._is_aligned_with(node_b)) {
          CityModel.link_agents(node_a, node_b);
          this.p.node = null;
          return this.die();
        }
      }
    };

    return RoadNode;

  })();
  return RoadNodeManager;
});
