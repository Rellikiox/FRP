// Generated by CoffeeScript 1.7.1
var RoadMaker, RoadMaker_instance_properties,
  __modulo = function(a, b) { return (a % b + +b) % b; };

RoadMaker = (function() {
  function RoadMaker() {}

  RoadMaker.road_makers = null;

  RoadMaker.default_color = [255, 255, 255];

  RoadMaker.radius_increment = 3;

  RoadMaker.initialize_module = function(road_makers_breed) {
    this.road_makers = road_makers_breed;
    return this.road_makers.setDefault('color', this.default_color);
  };

  RoadMaker.spawn_road_maker = function(patch) {
    var road_maker;
    road_maker = patch.sprout(1, this.road_makers)[0];
    extend(road_maker, RoadMaker_instance_properties);
    road_maker.init();
    return road_maker;
  };

  return RoadMaker;

})();

RoadMaker_instance_properties = {
  target_point: null,
  path: null,
  local_point: null,
  ring_radius: 6,
  init: function() {
    this.starting_position = {
      x: this.x,
      y: this.y
    };
    return this.current_state = this.return_to_city_hall_state;
  },
  step: function() {
    console.time('someFunction: timer start');
    this.current_state();
    return console.timeEnd('someFunction: timer end');
  },
  return_to_city_hall_state: function() {
    var closest_road_to_target;
    this.move(this.starting_position);
    if (this.in_starting_position()) {
      this.target_point = this.get_target_point();
      if (this.target_point != null) {
        closest_road_to_target = Road.get_closest_road_to(this.target_point);
        this.path = CityModel.instance.terrainAStar.getPath(this, closest_road_to_target);
        this.label = "go_to_point_state";
        return this.current_state = this.go_to_point_state;
      } else {
        return this.current_state = (function() {});
      }
    }
  },
  go_to_point_state: function() {
    this.move(this.path[0]);
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.path = CityModel.instance.terrainAStar.getPath(this, this.target_point);
        this.label = "build_to_point_state";
        return this.current_state = this.build_to_point_state;
      }
    }
  },
  build_to_point_state: function() {
    this.move(this.path[0]);
    if (!Road.is_road_here(this.p)) {
      this.dorp_road();
    }
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        Road.add_road_node(this.p);
        this.label = "return_to_city_hall_state";
        return this.current_state = this.return_to_city_hall_state;
      }
    }
  },
  dorp_road: function() {
    return Road.set_breed(this.p);
  },
  is_target_point: function() {
    return this.in_point(this.target_point);
  },
  in_starting_position: function() {
    return this.in_point(this.starting_position);
  },
  in_point: function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  },
  get_target_point: function() {
    var angle, point, potential_point, tries, x, y;
    point = null;
    tries = 0;
    while ((point == null) && tries < 32) {
      angle = ABM.util.randomFloat(2 * Math.PI);
      x = Math.round(this.ring_radius * Math.cos(angle));
      y = Math.round(this.ring_radius * Math.sin(angle));
      potential_point = {
        x: x,
        y: y
      };
      if (Road.is_too_connected(potential_point)) {
        angle += (Math.PI * 2) / 32;
        angle = __modulo(angle, Math.PI) * 2;
        tries += 1;
      } else {
        point = potential_point;
      }
    }
    if ((point == null) || !CityModel.is_on_world(point)) {
      this.ring_radius += RoadMaker.radius_increment;
      point = this.get_target_point();
    }
    return point;
  },
  face_point: function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  },
  move: function(point) {
    this.face_point(point);
    return this.forward(0.05);
  },
  get_local_point: function(point) {
    var dx, dy, heading;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.round(Math.atan2(dy, dx) / (Math.PI / 2));
    switch (false) {
      case heading !== 0:
        return {
          x: this.p.x + 1,
          y: this.p.y
        };
      case heading !== 1:
        return {
          x: this.p.x,
          y: this.p.y + 1
        };
      case heading !== -1:
        return {
          x: this.p.x,
          y: this.p.y - 1
        };
      case !(heading === 2 || heading === -2):
        return {
          x: this.p.x - 1,
          y: this.p.y
        };
    }
  }
};
