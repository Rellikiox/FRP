// Generated by CoffeeScript 1.7.1
var RoadConnector, RoadExtender, RoadMaker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RoadMaker = (function() {
  function RoadMaker() {}

  RoadMaker.road_makers = null;

  RoadMaker.default_color = [255, 255, 255];

  RoadMaker.radius_increment = 3;

  RoadMaker.initialize_module = function(road_makers_breed) {
    this.road_makers = road_makers_breed;
    return this.road_makers.setDefault('color', this.default_color);
  };

  RoadMaker.spawn_road_connector = function(road_a, road_b) {
    var road_maker;
    road_maker = this.spawn_road_maker(road_a, RoadConnector.prototype);
    road_maker.init(road_b);
    return road_maker;
  };

  RoadMaker.spawn_road_extender = function(endpoint) {
    var road_maker;
    road_maker = this.spawn_road_maker(CityModel.instance.city_hall, RoadExtender.prototype);
    road_maker.init(endpoint);
    return road_maker;
  };

  RoadMaker.spawn_road_maker = function(patch, prototype) {
    var road_maker;
    road_maker = patch.sprout(1, this.road_makers)[0];
    extend(road_maker, prototype);
    return road_maker;
  };

  RoadMaker.prototype.init = function() {};

  RoadMaker.prototype.step = function() {
    return this.current_state();
  };

  RoadMaker.prototype._get_path_to = function(point) {
    return CityModel.instance.terrainAStar.getPath(this, point);
  };

  RoadMaker.prototype.drop_road = function() {
    return Road.set_breed(this.p);
  };

  RoadMaker.prototype.is_target_point = function() {
    return this.in_point(this.target_point);
  };

  RoadMaker.prototype.in_starting_position = function() {
    return this.in_point(this.starting_position);
  };

  RoadMaker.prototype.in_point = function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  };

  RoadMaker.prototype.face_point = function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  };

  RoadMaker.prototype.move = function(point) {
    this.face_point(point);
    return this.forward(0.05);
  };

  return RoadMaker;

})();

RoadExtender = (function(_super) {
  __extends(RoadExtender, _super);

  function RoadExtender() {
    return RoadExtender.__super__.constructor.apply(this, arguments);
  }

  RoadExtender.prototype.init = function(endpoint) {
    this.endpoint = endpoint;
    this.current_state = this.go_to_point_state;
    return this.msg_reader = MessageBoard.get_reader('inspect_endpoint');
  };

  RoadExtender.prototype.go_to_point_state = function() {
    var closest_road_to_target;
    if (this.path == null) {
      closest_road_to_target = Road.get_closest_road_to(this.endpoint);
      this.path = this._get_path_to(closest_road_to_target);
    }
    this.move(this.path[0]);
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.path = CityModel.instance.terrainAStar.getPath(this, this.endpoint);
        this.label = "build_to_point_state";
        return this.current_state = this.build_to_point_state;
      }
    }
  };

  RoadExtender.prototype.build_to_point_state = function() {
    this.move(this.path[0]);
    if (!Road.is_road(this.p)) {
      this.drop_road();
    }
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.msg_reader.post_message({
          patch: this.p
        });
        return this.die();
      }
    }
  };

  return RoadExtender;

})(RoadMaker);

RoadConnector = (function(_super) {
  __extends(RoadConnector, _super);

  function RoadConnector() {
    return RoadConnector.__super__.constructor.apply(this, arguments);
  }

  return RoadConnector;

})(RoadMaker);
