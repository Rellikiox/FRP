// Generated by CoffeeScript 1.7.1
var GrowthPlanner, LotPlanner, NodeInterconnectivityPlanner, Planner, RoadPlanner,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Planner = (function() {
  function Planner() {}

  Planner.planners = null;

  Planner.initialize_module = function(planners_breed) {
    this.planners = planners_breed;
    return this.planners.setDefault('hidden', true);
  };

  Planner.spawn_road_planner = function() {
    return this.spawn_planner(RoadPlanner);
  };

  Planner.spawn_node_planner = function() {
    return this.spawn_planner(NodeInterconnectivityPlanner);
  };

  Planner.spawn_growth_planner = function() {
    return this.spawn_planner(GrowthPlanner);
  };

  Planner.spawn_lot_planner = function() {
    return this.spawn_planner(LotPlanner);
  };

  Planner.spawn_planner = function(klass) {
    var planner;
    planner = this.planners.create(1)[0];
    extend(planner, FSMAgent, klass);
    planner.init();
    return planner;
  };

  return Planner;

})();

NodeInterconnectivityPlanner = (function(_super) {
  __extends(NodeInterconnectivityPlanner, _super);

  function NodeInterconnectivityPlanner() {
    return NodeInterconnectivityPlanner.__super__.constructor.apply(this, arguments);
  }

  NodeInterconnectivityPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('nodes_unconnected');
    return this._set_initial_state('get_message');
  };

  NodeInterconnectivityPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('emit_road_connector');
    }
  };

  NodeInterconnectivityPlanner.prototype.s_emit_road_connector = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    RoadBuilder.spawn_road_connector(this.message.patch_a, this.message.patch_b);
    this.message = null;
    return this._set_state('get_message');
  };

  return NodeInterconnectivityPlanner;

})(Planner);

RoadPlanner = (function() {
  function RoadPlanner() {}

  RoadPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('possible_node');
    return this._set_initial_state('get_message');
  };

  RoadPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('send_road_extender');
    }
  };

  RoadPlanner.prototype.s_send_road_extender = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    RoadBuilder.spawn_road_extender(this.message.patch);
    this.message = null;
    return this._set_state('get_message');
  };

  return RoadPlanner;

})();

LotPlanner = (function() {
  function LotPlanner() {}

  LotPlanner.available_lots = [];

  LotPlanner.prototype.init = function() {
    this.boards = {
      possible: MessageBoard.get_board('possible_lot'),
      inspect: MessageBoard.get_board('inspect_lot')
    };
    return this._set_initial_state('get_message');
  };

  LotPlanner.prototype.s_get_message = function() {
    this.message = this.boards.possible.get_message();
    if (this.message != null) {
      return this._set_state('send_lot_inspector');
    }
  };

  LotPlanner.prototype.s_send_lot_inspector = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    this.boards.inspect.post_message({
      patch: this.message.patch
    });
    this.message = null;
    return this._set_state('get_message');
  };

  return LotPlanner;

})();

GrowthPlanner = (function() {
  function GrowthPlanner() {}

  GrowthPlanner.prototype.ticks_per_citizen = 30;

  GrowthPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('new_citizen');
    this.ticks_since_last_citizen = 0;
    return this._set_initial_state('wait_until_ready');
  };

  GrowthPlanner.prototype.s_wait_until_ready = function() {
    this.ticks_since_last_citizen += 1;
    if (this.ticks_since_last_citizen >= this.ticks_per_citizen) {
      return this._set_state('grow_population');
    }
  };

  GrowthPlanner.prototype.s_grow_population = function() {
    this.msg_reader.post_message();
    this.ticks_since_last_citizen = 0;
    return this._set_state('wait_until_ready');
  };

  return GrowthPlanner;

})();
