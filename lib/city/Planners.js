// Generated by CoffeeScript 1.7.1
var BulldozerPlanner, GenericPlanner, GrowthPlanner, HousingPlanner, NeedsPlanner, NodeInterconnectivityPlanner, Planner, PlotKeeperPlanner, PlotPlanner, RoadPlanner,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Planner = (function() {
  function Planner() {}

  Planner.planners = null;

  Planner.initialize = function(planners) {
    this.planners = planners;
    this.planners.setDefault('hidden', true);
    PlotKeeperPlanner.initialize();
    return NeedsPlanner.initialize();
  };

  Planner.spawn_road_planner = function() {
    return this.spawn_planner(RoadPlanner);
  };

  Planner.spawn_node_planner = function() {
    return this.spawn_planner(GenericPlanner);
  };

  Planner.spawn_bulldozer_planner = function() {
    return this.spawn_planner(BulldozerPlanner);
  };

  Planner.spawn_growth_planner = function() {
    return this.spawn_planner(GrowthPlanner);
  };

  Planner.spawn_plot_planner = function() {
    return this.spawn_planner(PlotPlanner);
  };

  Planner.spawn_housing_planner = function() {
    return this.spawn_planner(HousingPlanner);
  };

  Planner.spawn_plot_keeper_planner = function() {
    return this.spawn_planner(PlotKeeperPlanner);
  };

  Planner.spawn_needs_planner = function() {
    return this.spawn_planner(NeedsPlanner);
  };

  Planner.spawn_planner = function(klass) {
    var planner;
    planner = this.planners.create(1)[0];
    extend(planner, FSMAgent, klass);
    planner.init();
    return planner;
  };

  return Planner;

})();

GenericPlanner = (function(_super) {
  __extends(GenericPlanner, _super);

  function GenericPlanner() {
    return GenericPlanner.__super__.constructor.apply(this, arguments);
  }

  GenericPlanner.actions = {
    nodes_unconnected: function() {
      return RoadBuilder.spawn_road_connector(this.message.path);
    }
  };

  GenericPlanner.prototype.init = function() {
    var key, topics, value;
    topics = (function() {
      var _ref, _results;
      _ref = GenericPlanner.actions;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(key);
      }
      return _results;
    })();
    this.board = MessageBoard.get_combined_board(topics);
    return this._set_initial_state('get_message');
  };

  GenericPlanner.prototype.s_get_message = function() {
    this.message = this.board.get_message();
    if (this.message != null) {
      return this._set_state('run_action');
    }
  };

  GenericPlanner.prototype.s_run_action = function() {
    GenericPlanner.actions[this.message.type]();
    this.message = null;
    return this._set_state('get_message');
  };

  return GenericPlanner;

})(Planner);

NodeInterconnectivityPlanner = (function(_super) {
  __extends(NodeInterconnectivityPlanner, _super);

  function NodeInterconnectivityPlanner() {
    return NodeInterconnectivityPlanner.__super__.constructor.apply(this, arguments);
  }

  NodeInterconnectivityPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('nodes_unconnected');
    return this._set_initial_state('get_message');
  };

  NodeInterconnectivityPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('emit_road_connector');
    }
  };

  NodeInterconnectivityPlanner.prototype.s_emit_road_connector = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    RoadBuilder.spawn_road_connector(this.message.path);
    this.message = null;
    return this._set_state('get_message');
  };

  return NodeInterconnectivityPlanner;

})(Planner);

RoadPlanner = (function() {
  function RoadPlanner() {}

  RoadPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('possible_node');
    return this._set_initial_state('get_message');
  };

  RoadPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('send_road_extender');
    }
  };

  RoadPlanner.prototype.s_send_road_extender = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    RoadBuilder.spawn_road_extender(this.message.patch);
    this.message = null;
    return this._set_state('get_message');
  };

  return RoadPlanner;

})();

PlotPlanner = (function() {
  function PlotPlanner() {}

  PlotPlanner.prototype.init = function() {
    this.boards = {
      possible: MessageBoard.get_board('possible_plot'),
      inspect: MessageBoard.get_board('inspect_plot')
    };
    return this._set_initial_state('get_message');
  };

  PlotPlanner.prototype.s_get_message = function() {
    this.message = this.boards.possible.get_message();
    if (this.message != null) {
      return this._set_state('send_plot_inspector');
    }
  };

  PlotPlanner.prototype.s_send_plot_inspector = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    this.boards.inspect.post_message({
      patch: this.message.patch
    });
    this.message = null;
    return this._set_state('get_message');
  };

  return PlotPlanner;

})();

PlotKeeperPlanner = (function() {
  function PlotKeeperPlanner() {}

  PlotKeeperPlanner.available_plots = [];

  PlotKeeperPlanner.initialize = function() {
    return this.available_plots = [];
  };

  PlotKeeperPlanner.prototype.init = function() {
    this.board = MessageBoard.get_board('plot_built');
    return this._set_initial_state('get_message');
  };

  PlotKeeperPlanner.prototype.s_get_message = function() {
    this.message = this.board.get_message();
    if (this.message != null) {
      return PlotKeeperPlanner.available_plots.push(this.message.plot);
    }
  };

  return PlotKeeperPlanner;

})();

HousingPlanner = (function() {
  function HousingPlanner() {}

  HousingPlanner.prototype.init = function() {
    this.default_starting_point = CityModel.instance.city_hall;
    this.board = MessageBoard.get_board('new_citizen');
    return this._set_initial_state('get_message');
  };

  HousingPlanner.prototype.s_get_message = function() {
    this.message = this.board.get_message();
    if (this.message != null) {
      return this._set_state('send_house_builder');
    }
  };

  HousingPlanner.prototype.s_send_house_builder = function() {
    var block, starting_point;
    block = Plot.get_available_block();
    if (block != null) {
      starting_point = this.message.starting_point != null ? this.message.starting_point : this.default_starting_point;
      HouseBuilder.spawn_house_builder(starting_point, block);
      this.message = null;
      return this._set_state('get_message');
    }
  };

  return HousingPlanner;

})();

GrowthPlanner = (function() {
  function GrowthPlanner() {}

  GrowthPlanner.prototype.base_growth = 0.03;


  /*
      10% population growth per year. Each 1 person contributes to 10/100 of a new person each year
   */

  GrowthPlanner.prototype.growth_per_capita = (1 / 1825) * (10 / 100);

  GrowthPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('new_citizen');
    this.citizen_percentage = 0;
    return this._set_initial_state('grow_population');
  };

  GrowthPlanner.prototype.s_grow_population = function() {
    this.citizen_percentage += this.base_growth + this.growth_per_capita * House.population;
    if (this.citizen_percentage >= 1) {
      this.citizen_percentage -= 1;
      return this._set_state('spawn_citizen');
    }
  };

  GrowthPlanner.prototype.s_spawn_citizen = function() {
    this.msg_reader.post_message();
    return this._set_state('grow_population');
  };

  return GrowthPlanner;

})();

BulldozerPlanner = (function() {
  function BulldozerPlanner() {}

  BulldozerPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('bulldoze_path');
    return this._set_initial_state('get_message');
  };

  BulldozerPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('emit_bulldozer');
    }
  };

  BulldozerPlanner.prototype.s_emit_bulldozer = function() {
    if (this.message == null) {
      this._set_state('get_message');
      return;
    }
    Bulldozer.spawn_bulldozer(this.message.path, (function(_this) {
      return function() {
        return _this.board.post_message({
          path: _this.path_copy
        });
      };
    })(this));
    this.message = null;
    return this._set_state('get_message');
  };

  return BulldozerPlanner;

})();

NeedsPlanner = (function() {
  function NeedsPlanner() {}

  NeedsPlanner.needs = {
    hospital: {}
  };

  NeedsPlanner.supplied_needs = {
    hospital: 0
  };

  NeedsPlanner.initialize = function() {
    this.needs.hospital = {};
    return this.supplied_needs.hospital = 0;
  };

  NeedsPlanner.prototype.init = function() {
    this.msg_reader = MessageBoard.get_board('population_needs');
    return this._set_initial_state('get_message');
  };

  NeedsPlanner.prototype.s_get_message = function() {
    this.message = this.msg_reader.get_message();
    if (this.message != null) {
      return this._set_state('process_message');
    }
  };

  NeedsPlanner.prototype.s_process_message = function() {
    switch (this.message.need) {
      case 'hospital':
        this._process_hospital_need(this.message.house);
    }
    this.message = null;
    return this._set_state('get_message');
  };

  NeedsPlanner.prototype._process_hospital_need = function(house) {
    var building, houses_array, id, kmeans, needed_ammount, patch, people, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
    if (!(house.id in NeedsPlanner.needs.hospital)) {
      NeedsPlanner.needs.hospital[house.id] = house;
    }
    people = 0;
    _ref = NeedsPlanner.needs.hospital;
    for (id in _ref) {
      house = _ref[id];
      people += house.citizens;
    }
    needed_ammount = Math.floor(people / 100);
    if (needed_ammount > NeedsPlanner.supplied_needs.hospital) {
      houses_array = (function() {
        var _ref1, _results;
        _ref1 = NeedsPlanner.needs.hospital;
        _results = [];
        for (id in _ref1) {
          house = _ref1[id];
          _results.push(house);
        }
        return _results;
      })();
      kmeans = new KMeans(houses_array, needed_ammount);
      kmeans.run();
      NeedsPlanner.supplied_needs.hospital = kmeans.centroids().length;
      _ref1 = Building.get_of_type('hospital');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        building = _ref1[_i];
        Bulldozer.spawn_bulldozer([building], function() {
          return Block.make_here(this.p, building.plot);
        });
      }
      _ref2 = this._get_patches(kmeans.centroids());
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        patch = _ref2[_j];
        _results.push(BuildingBuilder.spawn_building_builder(CityModel.instance.city_hall, patch, 'hospital'));
      }
      return _results;
    }
  };

  NeedsPlanner.prototype._get_patches = function(points) {
    var point;
    points = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        _results.push({
          x: Math.round(point.x),
          y: Math.round(point.y)
        });
      }
      return _results;
    })();
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        _results.push(Block.closest_block(CityModel.get_patch_at(point)));
      }
      return _results;
    })();
  };

  return NeedsPlanner;

})();

CityModel.register_module(Planner, ['planners'], []);
