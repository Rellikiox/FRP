// Generated by CoffeeScript 1.7.1
var Board, MessageBoard, MultiReader;

MessageBoard = (function() {
  function MessageBoard() {}

  MessageBoard.message_queues = {};

  MessageBoard.initialize = function() {
    return this.message_queues = {};
  };

  MessageBoard._get_or_create_queue = function(type) {
    if (this.message_queues[type] == null) {
      this.message_queues[type] = [];
    }
    return this.message_queues[type];
  };

  MessageBoard.get_board = function(topic) {
    return new Board(topic);
  };

  MessageBoard.get_combined_board = function(topics) {
    return new MultiReader(topics);
  };

  return MessageBoard;

})();

MultiReader = (function() {
  function MultiReader(topics) {
    var topic;
    this.topics = topics;
    this.queues = (function() {
      var _i, _len, _ref, _results;
      _ref = this.topics;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        topic = _ref[_i];
        _results.push(MessageBoard._get_or_create_queue(topic));
      }
      return _results;
    }).call(this);
  }

  MultiReader.prototype.get_message = function() {
    var first_message, queue, queue_of_message, _i, _len, _ref;
    first_message = null;
    queue_of_message = null;
    _ref = this.queues;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      queue = _ref[_i];
      if (queue.length > 0) {
        if ((first_message == null) || first_message > queue[0].timestamp) {
          first_message = queue[0].timestamp;
          queue_of_message = queue;
        }
      }
    }
    if (first_message != null) {
      return queue_of_message.shift();
    }
  };

  return MultiReader;

})();

Board = (function() {
  function Board(topic) {
    this.topic = topic;
    this.queue = MessageBoard._get_or_create_queue(topic);
  }

  Board.prototype.get_message = function() {
    return this.queue.shift();
  };

  Board.prototype.post_message = function(message) {
    if (message == null) {
      message = {};
    }
    message.type = this.topic;
    message.timestamp = Date.now();
    return this.queue.push(message);
  };

  Board.prototype.message_count = function() {
    return this.queue.length;
  };

  return Board;

})();

CityModel.register_module(MessageBoard, [], []);
