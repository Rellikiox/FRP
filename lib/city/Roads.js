// Generated by CoffeeScript 1.7.1
define([], function() {
  var RoadManager;
  console.log("Loaded city/Roads.coffee");
  return RoadManager = (function() {
    var too_connected_threshold;

    too_connected_threshold = 2;

    RoadManager.prototype.default_color = [80, 80, 80];

    function RoadManager(roads) {
      this.roads = roads;
      this.roads.setDefault("color", this.default_color);
    }

    RoadManager.prototype.set_breed = function(patch, city_hall_dist) {
      if (city_hall_dist == null) {
        city_hall_dist = null;
      }
      this.roads.setBreed(patch);
      CityModel.instance.roadAStar.setWalkable(patch);
      this._update_distances(patch, 0, city_hall_dist);
      if (RoadNode.check_patch(patch)) {
        RoadNode.spawn_node(patch);
      }
      return null;
    };

    RoadManager.prototype.recalculate_distances = function() {
      var road, _i, _len, _ref, _results;
      _ref = this.roads;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        road = _ref[_i];
        _results.push(this._update_distances(road, 0, null));
      }
      return _results;
    };

    RoadManager.prototype._update_distances = function(patch, dist_to_road, city_hall_dist) {
      var n_road, new_distance, road, roads_to_update, _i, _len, _ref, _ref1;
      if (city_hall_dist == null) {
        city_hall_dist = this._get_min_neighbour(patch, "dist_to_city_hall", {
          get_value: true
        }) + 1;
      }
      patch.dist_to_road = dist_to_road;
      this._set_city_hall_dist(patch, city_hall_dist);
      roads_to_update = this._get_roads_to_update(patch, 0);
      while (roads_to_update.length > 0) {
        _ref = roads_to_update.pop(), road = _ref[0], new_distance = _ref[1];
        road.dist_to_road = new_distance;
        _ref1 = this._get_roads_to_update(road, new_distance);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          n_road = _ref1[_i];
          roads_to_update.push(n_road);
        }
      }
      return null;
    };

    RoadManager.prototype._set_city_hall_dist = function(road, dist_to_city_hall) {
      var n_road, _i, _len, _ref, _results;
      road.dist_to_city_hall = dist_to_city_hall;
      _ref = road.n4;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n_road = _ref[_i];
        if (n_road.breed === this.roads) {
          if ((n_road.dist_to_city_hall == null) || n_road.dist_to_city_hall > dist_to_city_hall + 1) {
            _results.push(this._set_city_hall_dist(n_road, dist_to_city_hall + 1));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    RoadManager.prototype._get_roads_to_update = function(road, new_distance) {
      var n_road, to_update, _i, _len, _ref;
      to_update = [];
      _ref = road.n4;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n_road = _ref[_i];
        if ((n_road.dist_to_road == null) || n_road.dist_to_road > new_distance + 1) {
          to_update.push([n_road, new_distance + 1]);
        }
      }
      return to_update;
    };

    RoadManager.prototype._spread_connectivity = function(patch) {
      var n_patch, new_distance, _i, _len, _ref;
      new_distance = patch.dist_to_road + 1;
      _ref = patch.n4;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n_patch = _ref[_i];
        if ((n_patch.dist_to_road == null) || n_patch.dist_to_road > new_distance) {
          this._set_distance_to_road(n_patch, new_distance);
        }
      }
      return null;
    };

    RoadManager.prototype.is_road = function(patch) {
      return patch.breed === this.roads;
    };

    RoadManager.prototype.get_closest_road_to = function(point) {
      var patch;
      patch = CityModel.get_patch_at(point);
      while (patch.dist_to_road !== 0) {
        patch = this._get_min_neighbour(patch, "dist_to_road", {});
      }
      return patch;
    };

    RoadManager.prototype.is_too_connected = function(point) {
      var patch;
      patch = CityModel.get_patch_at(point);
      return patch.dist_to_road <= this.too_connected_threshold;
    };

    RoadManager.prototype._get_min_neighbour = function(patch, param, _arg) {
      var filter, get_value, min_patch, neighbour, neighbours, _i, _len, _ref;
      get_value = _arg.get_value, filter = _arg.filter, neighbours = _arg.neighbours;
      if (get_value == null) {
        get_value = false;
      }
      if (filter == null) {
        filter = (function() {
          return true;
        });
      }
      if (neighbours == null) {
        neighbours = (function(p) {
          return p.n4;
        });
      }
      min_patch = patch;
      _ref = neighbours(patch);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        neighbour = _ref[_i];
        if (filter(neighbour)) {
          if ((min_patch[param] == null) || neighbour[param] < min_patch[param]) {
            min_patch = neighbour;
          }
        }
      }
      if (get_value) {
        return min_patch[param];
      } else {
        return min_patch;
      }
    };

    RoadManager.prototype._get_max_neighbour = function(patch, param, _arg) {
      var filter, get_value, max_patch, neighbour, neighbours, _i, _len, _ref;
      get_value = _arg.get_value, filter = _arg.filter, neighbours = _arg.neighbours;
      if (get_value == null) {
        get_value = false;
      }
      if (filter == null) {
        filter = (function() {
          return true;
        });
      }
      if (neighbours == null) {
        neighbours = (function(p) {
          return p.n4;
        });
      }
      max_patch = patch;
      _ref = neighbours(patch);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        neighbour = _ref[_i];
        if (filter(neighbour)) {
          if ((max_patch[param] == null) || neighbour[param] > max_patch[param]) {
            max_patch = neighbour;
          }
        }
      }
      if (get_value) {
        return max_patch[param];
      } else {
        return max_patch;
      }
    };

    RoadManager.prototype.add_road_node = function(road) {
      return this.road_nodes.push(road);
    };

    RoadManager.prototype._get_distance = function(road_a, road_b) {
      var dx, dy;
      dx = Math.abd(road_a.x, road_b.x);
      dy = Math.abd(road_a.y, road_b.y);
      return dx + dy;
    };

    RoadManager.prototype.get_road_distance = function(road_a, road_b) {
      return CityModel.instance.roadAStar.getPath(road_a, road_b).length;
    };

    RoadManager.prototype.get_connectivity = function(patch) {
      return patch.dist_to_road;
    };

    RoadManager.prototype._get_road_neighbours = function(patch) {
      var road;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = patch.n4;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          road = _ref[_i];
          if (this.is_road(road)) {
            _results.push(road);
          }
        }
        return _results;
      }).call(this);
    };

    return RoadManager;

  })();
});
