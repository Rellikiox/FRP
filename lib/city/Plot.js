// Generated by CoffeeScript 1.7.1
var Block, House, Plot;

Plot = (function() {
  Plot.make_plot = function(patches) {
    if ((patches != null) && patches.length > 0) {
      return new Plot(patches);
    }
  };

  Plot.prototype.patches = null;

  Plot.prototype.blocks = null;

  function Plot(patches) {
    var blocks, p, _i, _len;
    this.patches = patches;
    blocks = [];
    for (_i = 0, _len = patches.length; _i < _len; _i++) {
      p = patches[_i];
      p.color = ABM.util.randomGray(140, 170);
    }
    this._set_patch_references();
  }

  Plot.prototype._set_patch_references = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      _results.push(patch.plot = this);
    }
    return _results;
  };

  Plot.prototype.get_available_block = function() {
    var patch, shuffled, _i, _len, _ref;
    shuffled = this.patches;
    ABM.util.shuffle(shuffled);
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      if (!House.is_house(patch) || patch.has_free_space()) {
        return patch;
      }
    }
  };

  return Plot;

})();

Block = (function() {
  Block.prototype.houses = null;

  Block.prototype.plot = null;

  function Block(house) {
    this.houses = [house];
    this.plot = house.plot;
  }

  return Block;

})();

House = (function() {
  function House() {}

  House.houses = null;

  House.default_color = [100, 0, 0];

  House.max_citizens = 10;

  House.initialize = function(houses) {
    this.houses = houses;
    return this.houses.setDefault('color', this.default_color);
  };

  House.make_here = function(patch) {
    this.houses.setBreed(patch);
    extend(patch, House);
    return patch.init();
  };

  House.is_house = function(patch) {
    return patch.breed === this.houses;
  };

  House._update_navigation = function(house) {
    return CityModel.set_terrain_nav_patch_walkable(house, false);
  };

  House.prototype.block = null;

  House.prototype.citizens = 0;

  House.prototype.init = function() {
    this.block = new Block(this);
    House._update_navigation(this);
    return this.citizens = 0;
  };

  House.prototype.has_free_space = function() {
    return this.citizens < House.max_citizens;
  };

  House.prototype.increase_citizens = function() {
    if (this.has_free_space()) {
      this.citizens += 1;
      return this.color = ABM.util.scaleColor(this.color, 1.05);
    }
  };

  return House;

})();

CityModel.register_module(House, [], ['houses']);
