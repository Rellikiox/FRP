// Generated by CoffeeScript 1.7.1
var Block, House, Plot;

Plot = (function() {
  Plot.plots = null;

  Plot.initialize = function() {
    return this.plots = [];
  };

  Plot.make_plot = function(patches) {
    var plot;
    if ((patches != null) && patches.length > 0) {
      plot = new Plot(patches);
      this.plots.push(plot);
      return plot;
    }
  };

  Plot.is_part_of_plot = function(patch) {
    return (patch != null ? patch.plot : void 0) != null;
  };

  Plot.get_random_plot = function() {
    var i, plot, _i, _j, _len, _ref, _ref1, _results;
    if (this.plots.length > 0) {
      _ref1 = ABM.util.shuffle((function() {
        _results = [];
        for (var _j = 0, _ref = this.plots.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; 0 <= _ref ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this));
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        plot = this.plots[i];
        if (plot.is_available() && plot.has_free_space()) {
          return plot;
        }
      }
    }
    return null;
  };

  Plot.prototype.patches = null;

  Plot.prototype.blocks = null;

  Plot.prototype.under_construction = null;

  function Plot(patches) {
    var p, _i, _len, _ref;
    this.patches = patches;
    this.blocks = [];
    this.under_construction = false;
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.color = ABM.util.randomGray(140, 170);
    }
    this._set_patch_references();
  }

  Plot.prototype._set_patch_references = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      _results.push(patch.plot = this);
    }
    return _results;
  };

  Plot.prototype.get_available_block = function() {
    var i, _i, _j, _len, _ref, _ref1, _results;
    _ref1 = ABM.util.shuffle((function() {
      _results = [];
      for (var _j = 0, _ref = this.patches.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; 0 <= _ref ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this));
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      if (!House.is_house(this.patches[i]) || this.patches[i].has_free_space()) {
        return this.patches[i];
      }
    }
    return null;
  };

  Plot.prototype.has_free_space = function() {
    return this.get_available_block() != null;
  };

  Plot.prototype.get_closes_patch_to = function(patch) {
    var dist, min_dist, min_patch, p, _i, _len, _ref;
    min_dist = null;
    min_patch = null;
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      dist = ABM.util.distance(p.x, p.y, patch.x, patch.y);
      if ((min_dist == null) || dist < min_dist) {
        min_dist = dist;
        min_patch = p;
      }
    }
    return min_patch;
  };

  Plot.prototype.is_available = function() {
    return !this.under_construction;
  };

  return Plot;

})();

CityModel.register_module(Plot, [], []);

Block = (function() {
  Block.prototype.houses = null;

  Block.prototype.plot = null;

  function Block(house) {
    this.houses = [house];
    this.plot = house.plot;
  }

  return Block;

})();

House = (function() {
  function House() {}

  House.houses = null;

  House.default_color = [100, 0, 0];

  House.max_citizens = 10;

  House.initialize = function(houses) {
    this.houses = houses;
    return this.houses.setDefault('color', this.default_color);
  };

  House.make_here = function(patch) {
    this.houses.setBreed(patch);
    extend(patch, House);
    return patch.init();
  };

  House.is_house = function(patch) {
    return patch.breed === this.houses;
  };

  House._update_navigation = function(house) {
    return CityModel.set_terrain_nav_patch_walkable(house, false);
  };

  House.prototype.block = null;

  House.prototype.citizens = 0;

  House.prototype.init = function() {
    this.block = new Block(this);
    House._update_navigation(this);
    return this.citizens = 0;
  };

  House.prototype.has_free_space = function() {
    return this.citizens < House.max_citizens;
  };

  House.prototype.increase_citizens = function() {
    if (this.has_free_space()) {
      this.citizens += 1;
      return this.color = ABM.util.scaleColor(this.color, 1.05);
    }
  };

  House.prototype.reallocate_citizens = function() {
    return console.log("Uninplemented");
  };

  return House;

})();

CityModel.register_module(House, [], ['houses']);
