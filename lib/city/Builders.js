// Generated by CoffeeScript 1.7.1
var HouseBuilder, RoadBuilder, RoadConnector, RoadExtender,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RoadBuilder = (function() {
  function RoadBuilder() {}

  RoadBuilder.road_makers = null;

  RoadBuilder.default_color = [255, 255, 255];

  RoadBuilder.radius_increment = 3;

  RoadBuilder.initialize_module = function(road_makers_breed) {
    this.road_makers = road_makers_breed;
    return this.road_makers.setDefault('color', this.default_color);
  };

  RoadBuilder.spawn_road_connector = function(road_a, road_b) {
    var road_maker;
    road_maker = this.spawn_road_maker(road_a, RoadConnector);
    road_maker.init(road_b);
    return road_maker;
  };

  RoadBuilder.spawn_road_extender = function(endpoint) {
    var road_maker;
    road_maker = this.spawn_road_maker(CityModel.instance.city_hall, RoadExtender);
    road_maker.init(endpoint);
    return road_maker;
  };

  RoadBuilder.spawn_road_maker = function(patch, klass) {
    var road_maker;
    road_maker = patch.sprout(1, this.road_makers)[0];
    extend(road_maker, FSMAgent, klass);
    return road_maker;
  };

  RoadBuilder.prototype.speed = 0.05;

  RoadBuilder.prototype._drop_road = function() {
    return Road.set_breed(this.p);
  };

  RoadBuilder.prototype.s_build_to_point_state = function() {
    var point, _i, _len, _ref;
    if (this.path == null) {
      this.path = this._get_terrain_path_to(this.endpoint);
    }
    this._move(this.path[0]);
    if (!Road.is_road(this.p)) {
      this._drop_road();
    }
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        _ref = this.points_to_report;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          this.msg_reader.post_message({
            patch: point
          });
        }
        return this._set_state('die');
      }
    }
  };

  RoadBuilder.prototype.s_die = function() {
    return this.die();
  };

  return RoadBuilder;

})();

RoadExtender = (function(_super) {
  __extends(RoadExtender, _super);

  function RoadExtender() {
    return RoadExtender.__super__.constructor.apply(this, arguments);
  }

  RoadExtender.prototype.init = function(endpoint) {
    this.endpoint = endpoint;
    this.points_to_report = [this.endpoint];
    this._set_initial_state('go_to_point_state');
    return this.msg_reader = MessageBoard.get_board('node_built');
  };

  RoadExtender.prototype.s_go_to_point_state = function() {
    var closest_road_to_target;
    if (this.path == null) {
      closest_road_to_target = Road.get_closest_road_to(this.endpoint);
      this.path = this._get_terrain_path_to(closest_road_to_target);
    }
    this._move(this.path[0]);
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.path = CityModel.instance.terrainAStar.getPath(this, this.endpoint);
        return this._set_state('build_to_point_state');
      }
    }
  };

  return RoadExtender;

})(RoadBuilder);

RoadConnector = (function(_super) {
  __extends(RoadConnector, _super);

  function RoadConnector() {
    return RoadConnector.__super__.constructor.apply(this, arguments);
  }

  RoadConnector.prototype.init = function(endpoint) {
    this.startpoint = this.p;
    this.endpoint = endpoint;
    this.points_to_report = [this.startpoint, this.endpoint];
    this._set_initial_state('build_to_point_state');
    return this.msg_reader = MessageBoard.get_board('node_built');
  };

  return RoadConnector;

})(RoadBuilder);

HouseBuilder = (function() {
  function HouseBuilder() {}

  HouseBuilder.house_makers = null;

  HouseBuilder.default_color = [255, 0, 0];

  HouseBuilder.initialize_module = function(house_makers_breed) {
    this.house_makers = house_makers_breed;
    return this.house_makers.setDefault('color', this.default_color);
  };

  HouseBuilder.spawn_house_maker = function(patch) {
    var house_maker;
    house_maker = patch.sprout(1, this.house_makers)[0];
    extend(house_maker, BaseAgent.prototype);
    extend(house_maker, HouseMaker.prototype);
    house_maker.init();
    return house_maker;
  };

  HouseBuilder.prototype.speed = 0.05;

  HouseBuilder.prototype.init = function() {
    return this._set_initial_state('move_and_place');
  };

  HouseBuilder.prototype.s_move_and_place = function() {
    var near_patches, patch, _i, _j, _len, _len1, _results;
    near_patches = ABM.util.shuffle(this.p.n);
    for (_i = 0, _len = near_patches.length; _i < _len; _i++) {
      patch = near_patches[_i];
      if (!House.isHouseHere(patch) && !Road.is_road(patch)) {
        this._place_house(patch);
        break;
      }
    }
    near_patches = ABM.util.shuffle(this.p.n4);
    _results = [];
    for (_j = 0, _len1 = near_patches.length; _j < _len1; _j++) {
      patch = near_patches[_j];
      if (Road.is_road(patch)) {
        this._move(patch);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  HouseBuilder.prototype._place_house = function(patch) {
    return House.set_breed(patch);
  };

  return HouseBuilder;

})();
