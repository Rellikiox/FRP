// Generated by CoffeeScript 1.7.1
var BuildingBuilder, Bulldozer, HouseBuilder, RoadBuilder;

RoadBuilder = (function() {
  function RoadBuilder() {}

  RoadBuilder.road_builders = null;

  RoadBuilder.default_color = [255, 255, 255];

  RoadBuilder.initialize = function(road_builders) {
    this.road_builders = road_builders;
    this.road_builders.setDefault('color', this.default_color);
    return this.road_builders.setDefault('shape', 'triangle');
  };

  RoadBuilder.spawn_road_builder = function(path) {
    var road_builder;
    road_builder = path[0].sprout(1, this.road_builders)[0];
    extend(road_builder, FSMAgent, MovingAgent, RoadBuilder);
    road_builder.init(path);
    return road_builder;
  };

  RoadBuilder.prototype.init = function(path) {
    this.path = path;
    this.startpoint = this.path[0];
    this.endpoint = this.path[this.path.length - 1];
    this.points_to_report = [this.startpoint, this.endpoint];
    this._set_initial_state('build_to_point');
    return this.msg_boards = {
      node: MessageBoard.get_board('node_built'),
      plot: MessageBoard.get_board('possible_plot')
    };
  };

  RoadBuilder.prototype.s_build_to_point = function() {
    var point, _i, _len, _ref;
    if (this.path == null) {
      this.path = this._get_terrain_path_to(this.endpoint);
    }
    this._move(this.path[0]);
    this._drop_road();
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        _ref = this.points_to_report;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          this.msg_boards.node.post_message({
            patch: point
          });
        }
        return this._set_state('die');
      }
    }
  };

  RoadBuilder.prototype.speed = 0.05;

  RoadBuilder.prototype._drop_road = function() {
    if (!Road.is_road(this.p)) {
      this.p.under_construction = false;
      Road.set_breed(this.p);
      return this._check_for_plots();
    }
  };

  RoadBuilder.prototype._check_for_plots = function() {
    if (Road.get_roads_in_n8(this.p).length >= 2) {
      return this.msg_boards.plot.post_message({
        patch: this.p
      });
    }
  };

  RoadBuilder.prototype.s_die = function() {
    return this.die();
  };

  return RoadBuilder;

})();

CityModel.register_module(RoadBuilder, ['road_builders'], []);

HouseBuilder = (function() {
  function HouseBuilder() {}

  HouseBuilder.house_builders = null;

  HouseBuilder.default_color = [100, 0, 0];

  HouseBuilder.initialize = function(house_builders) {
    this.house_builders = house_builders;
    this.house_builders.setDefault('color', this.default_color);
    return this.house_builders.setDefault('shape', 'triangle');
  };

  HouseBuilder.spawn_house_builder = function(starting_point, patch) {
    var house_builder;
    house_builder = starting_point.sprout(1, this.house_builders)[0];
    extend(house_builder, FSMAgent, MovingAgent, HouseBuilder);
    house_builder.init(patch);
    return house_builder;
  };

  HouseBuilder.prototype.speed = 0.05;

  HouseBuilder.prototype.init = function(block) {
    this.block = block;
    this.board = MessageBoard.get_board('new_citizen');
    return this._set_initial_state('start_navigation');
  };

  HouseBuilder.prototype.s_start_navigation = function() {
    if (Road.get_road_neighbours(this.p).length > 0) {
      return this._set_state('go_to_plot');
    } else {
      return this._set_state('go_to_road');
    }
  };

  HouseBuilder.prototype.s_go_to_road = function() {
    if (this.road == null) {
      this.road = Road.get_closest_road_to(this.p);
    }
    this._move(this.road);
    if (this._in_point(this.road)) {
      return this._set_state('go_to_plot');
    }
  };

  HouseBuilder.prototype.s_go_to_plot = function() {
    var patch, road;
    if ((this.path == null) || this.path.length === 0) {
      if (this.block == null) {
        this._set_state('die');
        return;
      }
      patch = this.block.plot.get_closest_block_to(this.p);
      road = ABM.util.oneOf(Road.get_road_neighbours(patch));
      this.path = this._get_road_path_to(road);
    }
    this._move(this.path[0]);
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        return this._set_state('go_to_block');
      }
    }
  };

  HouseBuilder.prototype.s_go_to_block = function() {
    this._move(this.block);
    if (this._in_point(this.block)) {
      if (this._house_citizen(this.p)) {
        return this._set_state('die');
      } else {
        this.block = null;
        return this._set_state('get_new_block');
      }
    }
  };

  HouseBuilder.prototype.s_get_new_block = function() {
    if (this.block != null) {
      return this._set_state('start_navigation');
    } else {
      return this.block = Plot.get_available_block();
    }
  };

  HouseBuilder.prototype.s_die = function() {
    return this.die();
  };

  HouseBuilder.prototype._house_citizen = function(patch) {
    var block, house;
    if (Block.is_block(patch)) {
      block = patch;
      house = House.get_or_create(block);
      if (house != null ? house.has_free_space() : void 0) {
        house.increase_citizens();
        return true;
      }
    }
    return false;
  };

  return HouseBuilder;

})();

CityModel.register_module(HouseBuilder, ['house_builders'], []);

Bulldozer = (function() {
  function Bulldozer() {}

  Bulldozer.bulldozers = null;

  Bulldozer.default_color = [255, 255, 0];

  Bulldozer.initialize = function(bulldozers) {
    this.bulldozers = bulldozers;
    this.bulldozers.setDefault('color', this.default_color);
    return this.bulldozers.setDefault('shape', 'triangle');
  };

  Bulldozer.spawn_bulldozer = function(path, end_action) {
    var bulldozer;
    bulldozer = path[0].sprout(1, this.bulldozers)[0];
    extend(bulldozer, FSMAgent, MovingAgent, Bulldozer);
    bulldozer.init(path, end_action);
    return bulldozer;
  };

  Bulldozer.prototype.init = function(path, end_action) {
    var p;
    this.path = path;
    this.end_action = end_action;
    this.path_copy = (function() {
      var _i, _len, _ref, _results;
      _ref = this.path;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p);
      }
      return _results;
    }).call(this);
    this._set_initial_state('bulldoze_to_point');
    return this.board = MessageBoard.get_board('nodes_unconnected');
  };

  Bulldozer.prototype.s_bulldoze_to_point = function() {
    if (this.path == null) {
      this.path = this._get_terrain_path_to(this.endpoint);
    }
    this._move(this.path[0]);
    if (!Road.is_road(this.p)) {
      this._bulldoze_patch();
    }
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        return this._set_state('run_action');
      }
    }
  };

  Bulldozer.prototype.s_run_action = function() {
    if (this.end_action()) {
      return this._set_state('die');
    }
  };

  Bulldozer.prototype.s_die = function() {
    return this.die();
  };

  Bulldozer.prototype._bulldoze_patch = function() {
    var b, g, r, _ref;
    if (Block.is_block(this.p)) {
      this.p.destroy();
    }
    this.p.color = ABM.util.randomGray(100, 150);
    _ref = this.p.color, r = _ref[0], g = _ref[1], b = _ref[2];
    return this.p.color = [r, g * 2, b];
  };

  return Bulldozer;

})();

CityModel.register_module(Bulldozer, ['bulldozers'], []);

BuildingBuilder = (function() {
  function BuildingBuilder() {}

  BuildingBuilder.building_builders = null;

  BuildingBuilder.initialize = function(building_builders) {
    this.building_builders = building_builders;
    return this.building_builders.setDefault('shape', 'triangle');
  };

  BuildingBuilder.spawn_building_builder = function(starting_point, patch, type) {
    var building_builder;
    building_builder = starting_point.sprout(1, this.building_builders)[0];
    extend(building_builder, FSMAgent, MovingAgent, BuildingBuilder);
    building_builder.init(patch, type);
    return building_builder;
  };

  BuildingBuilder.prototype.speed = 0.05;

  BuildingBuilder.prototype.init = function(block, type) {
    var base_color;
    this.block = block;
    this.type = type;
    base_color = GenericBuilding.info[this.type].hsl_color;
    this.color = Colors.darken(base_color, 0.3).map(function(f) {
      return Math.round(f);
    });
    if (Road.get_road_neighbours(this.p).length > 0) {
      return this._set_initial_state('go_to_plot');
    } else {
      return this._set_initial_state('go_to_road');
    }
  };

  BuildingBuilder.prototype.s_go_to_road = function() {
    if (this.road == null) {
      this.road = Road.get_closest_road_to(this.p);
    }
    this._move(this.road);
    if (this._in_point(this.road)) {
      return this._set_state('go_to_plot');
    }
  };

  BuildingBuilder.prototype.s_go_to_plot = function() {
    var patch, road;
    if ((this.path == null) || this.path.length === 0) {
      patch = this.block.plot.get_closest_block_to(this.p);
      road = ABM.util.oneOf(Road.get_road_neighbours(patch));
      this.path = this._get_road_path_to(road);
    }
    this._move(this.path[0]);
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        return this._set_state('go_to_block');
      }
    }
  };

  BuildingBuilder.prototype.s_go_to_block = function() {
    this._move(this.block);
    if (this._in_point(this.block)) {
      return this._set_state('build');
    }
  };

  BuildingBuilder.prototype.s_build = function() {
    this.build();
    return this._set_state('die');
  };

  BuildingBuilder.prototype.s_die = function() {
    return this.die();
  };

  BuildingBuilder.prototype.build = function() {
    var shape;
    shape = GenericBuilding.get_shape(this.p, this.type);
    if (shape) {
      return GenericBuilding.make_here(shape, this.type);
    }
  };

  return BuildingBuilder;

})();

CityModel.register_module(BuildingBuilder, ['building_builders'], []);
