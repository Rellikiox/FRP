// Generated by CoffeeScript 1.7.1
var HouseBuilder, RoadBuilder, RoadConnector, RoadExtender,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RoadBuilder = (function() {
  function RoadBuilder() {}

  RoadBuilder.road_builders = null;

  RoadBuilder.default_color = [255, 255, 255];

  RoadBuilder.radius_increment = 3;

  RoadBuilder.initialize = function(road_builders) {
    this.road_builders = road_builders;
    return this.road_builders.setDefault('color', this.default_color);
  };

  RoadBuilder.spawn_road_connector = function(road_a, road_b) {
    var road_builder;
    road_builder = this.spawn_road_builder(road_a, RoadConnector);
    road_builder.init(road_b);
    return road_builder;
  };

  RoadBuilder.spawn_road_extender = function(endpoint) {
    var road_builder;
    road_builder = this.spawn_road_builder(CityModel.instance.city_hall, RoadExtender);
    road_builder.init(endpoint);
    return road_builder;
  };

  RoadBuilder.spawn_road_builder = function(patch, klass) {
    var road_builder;
    road_builder = patch.sprout(1, this.road_builders)[0];
    extend(road_builder, FSMAgent, MovingAgent, klass);
    return road_builder;
  };

  RoadBuilder.prototype.speed = 0.05;

  RoadBuilder.prototype._drop_road = function() {
    return Road.set_breed(this.p);
  };

  RoadBuilder.prototype.s_build_to_point_state = function() {
    var point, _i, _len, _ref;
    if (this.path == null) {
      this.path = this._get_terrain_path_to(this.endpoint);
    }
    this._move(this.path[0]);
    if (!Road.is_road(this.p)) {
      this._drop_road();
    }
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        _ref = this.points_to_report;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          this.msg_reader.post_message({
            patch: point
          });
        }
        return this._set_state('die');
      }
    }
  };

  RoadBuilder.prototype.s_die = function() {
    return this.die();
  };

  return RoadBuilder;

})();

RoadExtender = (function(_super) {
  __extends(RoadExtender, _super);

  function RoadExtender() {
    return RoadExtender.__super__.constructor.apply(this, arguments);
  }

  RoadExtender.prototype.init = function(endpoint) {
    this.endpoint = endpoint;
    this.points_to_report = [this.endpoint];
    this._set_initial_state('go_to_point_state');
    return this.msg_reader = MessageBoard.get_board('node_built');
  };

  RoadExtender.prototype.s_go_to_point_state = function() {
    var closest_road_to_target;
    if (this.path == null) {
      closest_road_to_target = Road.get_closest_road_to(this.endpoint);
      this.path = this._get_terrain_path_to(closest_road_to_target);
    }
    this._move(this.path[0]);
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.path = CityModel.instance.terrainAStar.getPath(this, this.endpoint);
        return this._set_state('build_to_point_state');
      }
    }
  };

  return RoadExtender;

})(RoadBuilder);

RoadConnector = (function(_super) {
  __extends(RoadConnector, _super);

  function RoadConnector() {
    return RoadConnector.__super__.constructor.apply(this, arguments);
  }

  RoadConnector.prototype.init = function(endpoint) {
    this.startpoint = this.p;
    this.endpoint = endpoint;
    this.points_to_report = [this.startpoint, this.endpoint];
    this._set_initial_state('build_to_point_state');
    return this.msg_boards = {
      node: MessageBoard.get_board('node_built'),
      plot: MessageBoard.get_board('possible_plot')
    };
  };

  RoadConnector.prototype.s_build_to_point_state = function() {
    var point, _i, _len, _ref;
    if (this.path == null) {
      this.path = this._get_terrain_path_to(this.endpoint);
    }
    this._move(this.path[0]);
    if (!Road.is_road(this.p)) {
      this._drop_road();
      this._check_for_plots();
    }
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        _ref = this.points_to_report;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          this.msg_boards.node.post_message({
            patch: point
          });
        }
        return this._set_state('die');
      }
    }
  };

  RoadConnector.prototype._check_for_plots = function() {
    if (Road.get_road_neighbours(this.p).length >= 2) {
      return this.msg_boards.plot.post_message({
        patch: this.p
      });
    }
  };

  return RoadConnector;

})(RoadBuilder);

CityModel.register_module(RoadBuilder, ['road_builders'], []);

HouseBuilder = (function() {
  function HouseBuilder() {}

  HouseBuilder.house_builders = null;

  HouseBuilder.default_color = [100, 0, 0];

  HouseBuilder.initialize = function(house_builders) {
    this.house_builders = house_builders;
    return this.house_builders.setDefault('color', this.default_color);
  };

  HouseBuilder.spawn_house_builder = function(patch) {
    var house_builder;
    house_builder = CityModel.instance.city_hall.sprout(1, this.house_builders)[0];
    extend(house_builder, FSMAgent, MovingAgent, HouseBuilder);
    house_builder.init(patch);
    return house_builder;
  };

  HouseBuilder.prototype.speed = 0.05;

  HouseBuilder.prototype.init = function(block) {
    this.block = block;
    return this._set_initial_state('go_to_plot');
  };

  HouseBuilder.prototype.s_go_to_plot = function() {
    var patch, road;
    if ((this.path == null) || this.path.length === 0) {
      patch = this.block.plot.get_closes_patch_to(this.p);
      road = ABM.util.oneOf(Road.get_road_neighbours(patch));
      this.path = this._get_road_path_to(road);
    }
    this._move(this.path[0]);
    if (this._in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        return this._set_state('go_to_block');
      }
    }
  };

  HouseBuilder.prototype.s_go_to_block = function() {
    this._move(this.block);
    if (this._in_point(this.block)) {
      this._house_citizen(this.p);
      return this._set_state('die');
    }
  };

  HouseBuilder.prototype.s_die = function() {
    return this.die();
  };

  HouseBuilder.prototype._house_citizen = function(patch) {
    if (!House.is_house(patch)) {
      House.make_here(patch);
    }
    if (patch.has_free_space()) {
      return patch.increase_citizens();
    } else {
      return this.block = patch.plot.get_available_block;
    }
  };

  return HouseBuilder;

})();

CityModel.register_module(HouseBuilder, ['house_builders'], []);
