// Generated by CoffeeScript 1.7.1
var App;

App = (function() {
  App.prototype.pause = false;

  function App(element_id) {
    this.element_id = element_id;
    this.setup_hotkeys();
    this.setup_model();
    this.setup_buttons();
  }

  App.prototype.setup_model = function() {
    this.model = new CityModel(this.element_id, 16, -16, 16, -16, 16);
    return $('#seed').val(GPW.pronounceable(8));
  };

  App.prototype.run = function() {
    var config;
    config = this.get_config();
    this.get_and_update_seed();
    return this.model.reset(config, !this.paused);
  };

  App.prototype.restart = function() {
    return this.run();
  };

  App.prototype.get_and_update_seed = function() {
    this.seed = $('#seed').val();
    return Math.seedrandom(this.seed);
  };

  App.prototype.get_int_val = function(id) {
    return parseInt($(id).val());
  };

  App.prototype.get_cb_val = function(id) {
    return $(id).prop('checked');
  };

  App.prototype.get_config = function() {
    return {
      inspectors: {
        node_inspector: {
          inspection_radius: this.get_int_val('#inspection-area'),
          max_distance_factor: this.get_int_val('#distance-factor')
        },
        road_inspector: {
          ring_radius: this.get_int_val('#initial-radius'),
          ring_increment: this.get_int_val('#radius-increment')
        }
      },
      debug: {
        agents: {
          show_states: this.get_cb_val('#show-state'),
          show_ids: this.get_cb_val('#show-id'),
          show_logs: this.get_cb_val('#show-logs')
        }
      }
    };
  };

  App.prototype.play_pause_model = function() {
    if (this.paused) {
      this.model.start();
      $('#play-pause').find('.btn-text').text('Pause');
    } else {
      this.model.stop();
      $('#play-pause').find('.btn-text').text('Play');
    }
    this.paused = !this.paused;
    return null;
  };

  App.prototype.step_model = function() {
    var steps;
    steps = this.get_int_val('input.step');
    return this.animate(steps);
  };

  App.prototype.set_key_command = function(key, fn) {
    return $(document).bind('keydown', key, fn);
  };

  App.prototype.setup_hotkeys = function() {
    return this.set_key_command('r', (function(_this) {
      return function() {
        return _this.restart();
      };
    })(this));
  };

  App.prototype.setup_buttons = function() {
    $('#play-pause').click((function(_this) {
      return function() {
        _this.play_pause_model();
        return $('#play-pause span.glyphicon').toggleClass('glyphicon-play').toggleClass('glyphicon-pause');
      };
    })(this));
    $('a#step').click((function(_this) {
      return function() {
        return _this.step_model();
      };
    })(this));
    $('#reload').click((function(_this) {
      return function() {
        return _this.restart();
      };
    })(this));
    return $('input.j-update-debug-info').click((function(_this) {
      return function() {
        return _this.update_debug_info();
      };
    })(this));
  };

  App.prototype.update_debug_info = function() {
    var config;
    config = {
      agents: {
        show_states: this.get_cb_val('#show-state'),
        show_ids: this.get_cb_val('#show-id'),
        show_logs: this.get_cb_val('#show-logs')
      }
    };
    return this.model.update_debug_config(config);
  };

  App.prototype.get_model = function() {
    return this.model;
  };

  App.prototype.animate = function(ticks) {
    var i;
    this.model.stop();
    i = 0;
    while (i < ticks) {
      this.model.anim.step();
      i += 1;
    }
    if (!this.paused) {
      return this.model.start();
    } else {
      return this.model.anim.draw();
    }
  };

  return App;

})();
