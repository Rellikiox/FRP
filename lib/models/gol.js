// Generated by CoffeeScript 1.7.1
var MyModel, model, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = ABM.util;

MyModel = (function(_super) {
  __extends(MyModel, _super);

  function MyModel() {
    return MyModel.__super__.constructor.apply(this, arguments);
  }

  MyModel.prototype.setup = function() {
    var p, _i, _len, _ref, _results;
    this.patches.usePixels();
    this.density = 25;
    this.anim.setRate(10, false);
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (u.randomInt(100) < this.density) {
        _results.push(p.alive = true);
      }
    }
    return _results;
  };

  MyModel.prototype.countLiveNeighbors = function(patch) {
    var n, neighbors;
    neighbors = (function() {
      var _i, _len, _ref, _results;
      _ref = patch.n;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (n.alive) {
          _results.push(n);
        }
      }
      return _results;
    })();
    return neighbors.length;
  };

  MyModel.prototype.step = function() {
    var neighbors, p, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (this.anim.ticks % 10 === 0) {
      console.log(this.anim.toString());
    }
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      neighbors = this.countLiveNeighbors(p);
      switch (neighbors) {
        case 2:
          p.new_alive = p.alive;
          break;
        case 3:
          p.new_alive = true;
          break;
        default:
          p.new_alive = false;
      }
    }
    _ref1 = this.patches;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      p = _ref1[_j];
      p.alive = p.new_alive;
      if (p.alive) {
        _results.push(p.color = [255, 0, 0]);
      } else {
        _results.push(p.color = [255, 255, 255]);
      }
    }
    return _results;
  };

  return MyModel;

})(ABM.Model);

model = new MyModel("layers", 10, -25, 25, -20, 20, true);

model.debug();

model.start();
