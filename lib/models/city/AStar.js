// Generated by CoffeeScript 1.7.1
var AStarHelper;

AStarHelper = (function() {
  AStarHelper.createGrid = function(width, height, walkable) {
    var val, x, y, _i, _results;
    val = walkable ? 0 : 1;
    _results = [];
    for (y = _i = 1; 1 <= height ? _i <= height : _i >= height; y = 1 <= height ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (x = _j = 1; 1 <= width ? _j <= width : _j >= width; x = 1 <= width ? ++_j : --_j) {
          _results1.push(val);
        }
        return _results1;
      })());
    }
    return _results;
  };

  AStarHelper.prototype.grid = null;

  AStarHelper.prototype.finder = null;

  AStarHelper.prototype.xToGridTransform = null;

  AStarHelper.prototype.yToGridTransform = null;

  AStarHelper.prototype.xToWorldTransform = null;

  AStarHelper.prototype.yToWorldTransform = null;

  function AStarHelper(width, height, walkable, heuristic) {
    if (walkable == null) {
      walkable = true;
    }
    if (heuristic == null) {
      heuristic = null;
    }
    this.grid = new PF.Grid(width, height, AStarHelper.createGrid(width, height, walkable));
    this.finder = new PF.AStarFinder({
      heuristic: (function(_this) {
        return function(current_node, end_node) {
          var dx, dy, val;
          dx = Math.abs(end_node.x - current_node.x);
          dy = Math.abs(end_node.y - current_node.y);
          val = dx + dy;
          if (CityModel.get_patch_at(_this.transformPointToWorld(current_node.x, current_node.y)).dist_to_road === 1) {
            val += 1;
          }
          return val;
        };
      })(this)
    });
  }

  AStarHelper.prototype.setWalkable = function(p, walkable) {
    var x, y, _ref;
    if (walkable == null) {
      walkable = true;
    }
    _ref = this.transformPointToGrid(p), x = _ref[0], y = _ref[1];
    this.grid.setWalkableAt(x, y, walkable);
    return null;
  };

  AStarHelper.prototype.getPath = function(p1, p2) {
    var path, x, x1, x2, y, y1, y2, _grid, _ref, _ref1;
    _ref = this.transformPointToGrid(p1), x1 = _ref[0], y1 = _ref[1];
    _ref1 = this.transformPointToGrid(p2), x2 = _ref1[0], y2 = _ref1[1];
    _grid = this.grid.clone();
    path = this.finder.findPath(x1, y1, x2, y2, this.grid);
    this.grid = _grid;
    return (function() {
      var _i, _len, _ref2, _results;
      _results = [];
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        _ref2 = path[_i], x = _ref2[0], y = _ref2[1];
        _results.push(this.transformPointToWorld(x, y));
      }
      return _results;
    }).call(this);
  };

  AStarHelper.prototype.setToGridTransforms = function(xTr, yTr) {
    this.xToGridTransform = xTr;
    this.yToGridTransform = yTr;
    return null;
  };

  AStarHelper.prototype.setToWorldTransforms = function(xTr, yTr) {
    this.xToWorldTransform = xTr;
    this.yToWorldTransform = yTr;
    return null;
  };

  AStarHelper.prototype.transformPointToGrid = function(p) {
    return [this.xToGridTransform(Math.round(p.x)), this.yToGridTransform(Math.round(p.y))];
  };

  AStarHelper.prototype.transformPointToWorld = function(x, y) {
    return {
      x: this.xToWorldTransform(x),
      y: this.yToWorldTransform(y)
    };
  };

  return AStarHelper;

})();
