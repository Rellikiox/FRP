// Generated by CoffeeScript 1.7.1
var RoadMaker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __modulo = function(a, b) { return (a % b + +b) % b; };

RoadMaker = (function(_super) {
  __extends(RoadMaker, _super);

  RoadMaker.breed_name = 'roadMakers';

  RoadMaker.breed = null;

  RoadMaker.default_color = [255, 255, 255];

  RoadMaker.size = 1;

  RoadMaker.radius_increment = 3;

  RoadMaker.prototype.target_point = null;

  RoadMaker.prototype.path = null;

  RoadMaker.prototype.local_point = null;

  RoadMaker.prototype.ring_radius = 6;

  RoadMaker.agentSet = function() {
    var breed, _i, _len, _ref;
    if (this.breed == null) {
      _ref = ABM.agents.breeds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        breed = _ref[_i];
        if (breed.name === this.breed_name) {
          this.breed = breed;
          break;
        }
      }
    }
    return this.breed;
  };

  RoadMaker.makeNew = function(x, y) {
    var road_maker;
    road_maker = new RoadMaker(x, y, this.default_color, 1);
    this.agentSet().add(road_maker);
    return road_maker;
  };

  function RoadMaker(x, y, color, size) {
    this.color = color;
    this.size = size;
    RoadMaker.__super__.constructor.apply(this, arguments);
    this.setXY(x, y);
    this.starting_position = {
      x: x,
      y: y
    };
    this.current_state = this.return_to_city_hall_state;
  }

  RoadMaker.prototype.step = function() {
    console.time('someFunction: timer start');
    this.current_state();
    return console.timeEnd('someFunction: timer end');
  };

  RoadMaker.prototype.return_to_city_hall_state = function() {
    var closest_road_to_target;
    this.move(this.starting_position);
    if (this.in_starting_position()) {
      this.target_point = this.get_target_point();
      closest_road_to_target = Road.get_closest_road_to(this.target_point);
      this.path = CityModel.instance.terrainAStar.getPath(this, closest_road_to_target);
      this.label = "go_to_point_state";
      return this.current_state = this.go_to_point_state;
    }
  };

  RoadMaker.prototype.go_to_point_state = function() {
    this.move(this.path[0]);
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.path = CityModel.instance.terrainAStar.getPath(this, this.target_point);
        this.label = "build_to_point_state";
        return this.current_state = this.build_to_point_state;
      }
    }
  };

  RoadMaker.prototype.build_to_point_state = function() {
    this.move(this.path[0]);
    if (!Road.is_road_here(this.p)) {
      this.dorp_road();
    }
    if (this.in_point(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        this.label = "return_to_city_hall_state";
        return this.current_state = this.return_to_city_hall_state;
      }
    }
  };

  RoadMaker.prototype.dorp_road = function() {
    return Road.makeHere(this.p);
  };

  RoadMaker.prototype.is_target_point = function() {
    return this.in_point(this.target_point);
  };

  RoadMaker.prototype.in_starting_position = function() {
    return this.in_point(this.starting_position);
  };

  RoadMaker.prototype.in_point = function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  };

  RoadMaker.prototype.get_target_point = function() {
    var angle, point, potential_point, tries, x, y;
    point = null;
    tries = 0;
    while ((point == null) && tries < 32) {
      angle = ABM.util.randomFloat(2 * Math.PI);
      x = Math.round(this.x + this.ring_radius * Math.cos(angle));
      y = Math.round(this.y + this.ring_radius * Math.sin(angle));
      potential_point = {
        x: x,
        y: y
      };
      if (Road.is_too_connected(potential_point)) {
        angle += (Math.PI * 2) / 32;
        angle = __modulo(angle, Math.PI) * 2;
        tries += 1;
      } else {
        point = potential_point;
      }
    }
    if ((point == null) || !CityModel.is_on_world(point)) {
      this.ring_radius += RoadMaker.radius_increment;
      point = this.get_target_point();
    }
    return point;
  };

  RoadMaker.prototype.face_point = function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  };

  RoadMaker.prototype.move = function(point) {
    this.face_point(point);
    return this.forward(0.05);
  };

  RoadMaker.prototype.get_local_point = function(point) {
    var dx, dy, heading;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.round(Math.atan2(dy, dx) / (Math.PI / 2));
    switch (false) {
      case heading !== 0:
        return {
          x: this.p.x + 1,
          y: this.p.y
        };
      case heading !== 1:
        return {
          x: this.p.x,
          y: this.p.y + 1
        };
      case heading !== -1:
        return {
          x: this.p.x,
          y: this.p.y - 1
        };
      case !(heading === 2 || heading === -2):
        return {
          x: this.p.x - 1,
          y: this.p.y
        };
    }
  };

  return RoadMaker;

})(ABM.Agent);
