// Generated by CoffeeScript 1.7.1
var RoadMaker,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RoadMaker = (function(_super) {
  __extends(RoadMaker, _super);

  RoadMaker.breed_name = 'roadMakers';

  RoadMaker.breed = null;

  RoadMaker.color = [0, 255, 0];

  RoadMaker.size = 1;

  RoadMaker.radius_increment = 10;

  RoadMaker.prototype.target_point = null;

  RoadMaker.prototype.path = null;

  RoadMaker.prototype.local_point = null;

  RoadMaker.prototype.ring_radius = 10;

  RoadMaker.agentSet = function() {
    var breed, _i, _len, _ref;
    if (this.breed == null) {
      _ref = ABM.agents.breeds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        breed = _ref[_i];
        if (breed.name === this.breed_name) {
          this.breed = breed;
          break;
        }
      }
    }
    return this.breed;
  };

  RoadMaker.makeNew = function(x, y) {
    var road_maker;
    road_maker = new RoadMaker(x, y, [0, 255, 0], 1);
    this.agentSet().add(road_maker);
    return road_maker;
  };

  function RoadMaker(x, y, color, size) {
    this.color = color;
    this.size = size;
    RoadMaker.__super__.constructor.apply(this, arguments);
    this.setXY(x, y);
    this.starting_position = {
      x: x,
      y: y
    };
    this.target_point = this.getTargetPoint();
    this.path = CityModel.instance.terrainAStar.getPath(this, this.target_point);
    this.current_state = this.seekTargetPointState;
  }

  RoadMaker.prototype.step = function() {
    return this.current_state();
  };

  RoadMaker.prototype.goToStartingPositionState = function() {
    this.move(this.starting_position);
    if (this.inStartingPosition()) {
      this.target_point = this.getTargetPoint();
      this.path = CityModel.instance.terrainAStar.getPath(this, this.target_point);
      return this.current_state = this.seekTargetPointState;
    }
  };

  RoadMaker.prototype.seekTargetPointState = function() {
    this.move(this.path[0]);
    if (!Road.isRoadHere(this.p)) {
      this.dropRoad();
    }
    if (this.inPoint(this.path[0])) {
      this.path.shift();
      if (this.path.length === 0) {
        return this.current_state = this.goToStartingPositionState;
      }
    }
  };

  RoadMaker.prototype.dropRoad = function() {
    return Road.makeHere(this.p);
  };

  RoadMaker.prototype.inTargetPoint = function() {
    return this.inPoint(this.target_point);
  };

  RoadMaker.prototype.inStartingPosition = function() {
    return this.inPoint(this.starting_position);
  };

  RoadMaker.prototype.inPoint = function(point) {
    return 0.1 > ABM.util.distance(this.x, this.y, point.x, point.y);
  };

  RoadMaker.prototype.getTargetPoint = function() {
    var angle, x, y;
    angle = ABM.util.randomFloat(360);
    x = Math.round(this.x + this.ring_radius * Math.cos(angle));
    y = Math.round(this.y + this.ring_radius * Math.sin(angle));
    console.log(x + " " + y);
    return {
      x: x,
      y: y
    };
  };

  RoadMaker.prototype.facePoint = function(point) {
    var dx, dy, heading, turn;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.atan2(dy, dx);
    turn = ABM.util.subtractRads(heading, this.heading);
    return this.rotate(turn);
  };

  RoadMaker.prototype.move = function(point) {
    this.facePoint(point);
    return this.forward(0.05);
  };

  RoadMaker.prototype.getLocalPoint = function(point) {
    var dx, dy, heading;
    dx = point.x - this.x;
    dy = point.y - this.y;
    heading = Math.round(Math.atan2(dy, dx) / (Math.PI / 2));
    switch (false) {
      case heading !== 0:
        return {
          x: this.p.x + 1,
          y: this.p.y
        };
      case heading !== 1:
        return {
          x: this.p.x,
          y: this.p.y + 1
        };
      case heading !== -1:
        return {
          x: this.p.x,
          y: this.p.y - 1
        };
      case !(heading === 2 || heading === -2):
        return {
          x: this.p.x - 1,
          y: this.p.y
        };
    }
  };

  return RoadMaker;

})(ABM.Agent);
