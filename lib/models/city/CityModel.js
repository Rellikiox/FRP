// Generated by CoffeeScript 1.7.1
var CityModel, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = ABM.util;

CityModel = (function(_super) {
  __extends(CityModel, _super);

  function CityModel() {
    return CityModel.__super__.constructor.apply(this, arguments);
  }

  CityModel.instance = null;

  CityModel.prototype.setUpAStarHelpers = function() {
    var height, width, x_to_grid_transform, x_to_world_transform, y_to_grid_transform, y_to_world_transform;
    width = this.world.maxX - this.world.minX;
    height = this.world.maxY - this.world.minY;
    x_to_grid_transform = (function(_this) {
      return function(x) {
        return x - _this.world.minX;
      };
    })(this);
    y_to_grid_transform = (function(_this) {
      return function(y) {
        return -y - _this.world.minY;
      };
    })(this);
    x_to_world_transform = (function(_this) {
      return function(x) {
        return x + _this.world.minX;
      };
    })(this);
    y_to_world_transform = (function(_this) {
      return function(y) {
        return -(y + _this.world.minY);
      };
    })(this);
    this.roadAStar = new AStarHelper(width, height, false);
    this.roadAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    this.roadAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
    this.terrainAStar = new AStarHelper(width, height, true);
    this.terrainAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    return this.terrainAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
  };

  CityModel.prototype.setup = function() {
    var house_maker, p, patch, road_maker, _i, _j, _len, _len1, _ref, _ref1;
    CityModel.instance = this;
    this.setUpAStarHelpers();
    this.patchBreeds("city_hall roads houses aaa");
    this.agentBreeds("roadMakers houseMakers");
    this.anim.setRate(30, false);
    this.refreshPatches = true;
    this.links.setDefault("labelColor", [255, 0, 0]);
    this.patches.setDefault("connectivity", 0.0);
    this.draw_mode = "connectivity";
    _ref = this.patches;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.color = u.randomGray(120, 220);
      p.default_color = p.color;
    }
    this.city_hall = this.createCityHall(0, 0);
    _ref1 = this.city_hall.p.n;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      patch = _ref1[_j];
      Road.makeHere(patch);
    }
    patch = u.oneOf(this.city_hall.p.n4);
    road_maker = RoadMaker.makeNew(patch.x, patch.y);
    this.links.create(this.city_hall, road_maker);
    patch = u.oneOf(this.city_hall.p.n4);
    road_maker = RoadMaker.makeNew(patch.x, patch.y);
    this.links.create(this.city_hall, road_maker);
    patch = u.oneOf(this.city_hall.p.n4);
    return house_maker = HouseMaker.makeNew(patch.x, patch.y);
  };

  CityModel.prototype.step = function() {
    var house_maker, road_maker, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (this.anim.ticks % 100 === 0) {
      console.log(this.anim.toString());
    }
    _ref = this.roadMakers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      road_maker = _ref[_i];
      road_maker.step();
    }
    _ref1 = this.houseMakers;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      house_maker = _ref1[_j];
      _results.push(house_maker.step());
    }
    return _results;
  };

  CityModel.prototype.draw = function() {
    switch (this.draw_mode) {
      case "normal":
        this.drawNormalColor();
        break;
      case "connectivity":
        this.drawConnectivityColor();
    }
    return CityModel.__super__.draw.apply(this, arguments);
  };

  CityModel.prototype.createCityHall = function(x, y) {
    var agent;
    agent = (this.agents.create(1))[0];
    agent.setXY(x, y);
    agent.color = [0, 0, 100];
    agent.shape = "square";
    agent.size = 1;
    return agent;
  };

  CityModel.prototype.drawMode = function(mode) {
    return this.draw_mode = mode;
  };

  CityModel.prototype.drawNormalColor = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      if (patch.breed.name === "patches") {
        _results.push(patch.color = patch.default_color);
      }
    }
    return _results;
  };

  CityModel.prototype.drawConnectivityColor = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      if (patch.breed.name === "patches") {
        _results.push(patch.color = patch.connectivity_color != null ? patch.connectivity_color : patch.color);
      }
    }
    return _results;
  };

  return CityModel;

})(ABM.Model);
