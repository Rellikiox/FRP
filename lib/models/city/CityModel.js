// Generated by CoffeeScript 1.7.1
var CityModel, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = ABM.util;

CityModel = (function(_super) {
  __extends(CityModel, _super);

  function CityModel() {
    return CityModel.__super__.constructor.apply(this, arguments);
  }

  CityModel.instance = null;

  CityModel.get_patch_at = function(point) {
    return this.instance.patches.patchXY(Math.round(point.x), Math.round(point.y));
  };

  CityModel.is_on_world = function(point) {
    return this.instance.patches.isOnWorld(Math.round(point.x), Math.round(point.y));
  };

  CityModel.link_agents = function(agent_a, agent_b) {
    return this.instance.links.create(agent_a, agent_b);
  };

  CityModel.prototype.setup = function() {
    CityModel.instance = this;
    this.set_up_AStar_helpers();
    this.set_default_params();
    this.initialize_modules();
    this.init_patches();
    return this.spawn_entities();
  };

  CityModel.prototype.step = function() {
    var house_maker, road_maker, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (this.anim.ticks % 100 === 0) {
      console.log(this.anim.toString());
    }
    _ref = this.roadMakers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      road_maker = _ref[_i];
      road_maker.step();
    }
    _ref1 = this.houseMakers;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      house_maker = _ref1[_j];
      _results.push(house_maker.step());
    }
    return _results;
  };

  CityModel.prototype.draw = function() {
    switch (this.draw_mode) {
      case "normal":
        this.draw_normal_color();
        break;
      case "connectivity":
        this.draw_connectivity_color();
    }
    return CityModel.__super__.draw.apply(this, arguments);
  };

  CityModel.prototype.initialize_modules = function() {
    Road.initialize_module(this.patches, this.roads);
    return RoadNode.initialize_module(this.road_nodes);
  };

  CityModel.prototype.create_city_hall = function(x, y) {
    var agent;
    agent = (this.agents.create(1))[0];
    agent.setXY(x, y);
    agent.color = [0, 0, 100];
    agent.shape = "square";
    agent.size = 1;
    agent.p.dist_to_city_hall = 0;
    return agent;
  };

  CityModel.prototype.set_default_params = function() {
    this.patchBreeds("city_hall roads houses");
    this.agentBreeds("roadMakers houseMakers road_nodes");
    this.anim.setRate(120, false);
    this.refreshPatches = true;
    this.refreshLinks = true;
    this.links.setDefault("labelColor", [255, 0, 0]);
    this.patches.setDefault("free", true);
    return this.draw_mode = "normal";
  };

  CityModel.prototype.spawn_entities = function() {
    var patch, _i, _j, _len, _len1, _ref, _ref1;
    this.city_hall = this.create_city_hall(0, 0);
    _ref = this.city_hall.p.n4;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      Road.makeHere(patch, 1);
    }
    _ref1 = this.city_hall.p.n;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      patch = _ref1[_j];
      if (!(patch.breed === this.roads)) {
        Road.makeHere(patch, 2);
      }
    }
    return this.spawn_road_makers(1);
  };

  CityModel.prototype.spawn_road_makers = function(ammount) {
    var i, patch, road_maker, _results;
    i = 0;
    _results = [];
    while (i < ammount) {
      patch = u.oneOf(this.city_hall.p.n4);
      road_maker = RoadMaker.makeNew(patch.x, patch.y);
      this.links.create(this.city_hall, road_maker);
      _results.push(i += 1);
    }
    return _results;
  };

  CityModel.prototype.set_up_AStar_helpers = function() {
    var height, width, x_to_grid_transform, x_to_world_transform, y_to_grid_transform, y_to_world_transform;
    width = this.world.maxX - this.world.minX;
    height = this.world.maxY - this.world.minY;
    x_to_grid_transform = (function(_this) {
      return function(x) {
        return x - _this.world.minX;
      };
    })(this);
    y_to_grid_transform = (function(_this) {
      return function(y) {
        return -y - _this.world.minY;
      };
    })(this);
    x_to_world_transform = (function(_this) {
      return function(x) {
        return x + _this.world.minX;
      };
    })(this);
    y_to_world_transform = (function(_this) {
      return function(y) {
        return -(y + _this.world.minY);
      };
    })(this);
    this.roadAStar = new AStarHelper(width, height, false);
    this.roadAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    this.roadAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
    this.terrainAStar = new AStarHelper(width, height, true);
    this.terrainAStar.setToGridTransforms(x_to_grid_transform, y_to_grid_transform);
    return this.terrainAStar.setToWorldTransforms(x_to_world_transform, y_to_world_transform);
  };

  CityModel.prototype.init_patches = function() {
    var b, g, p, r, _i, _len, _ref, _ref1, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      p.color = u.randomGray(100, 150);
      _ref1 = p.color, r = _ref1[0], g = _ref1[1], b = _ref1[2];
      p.color = [r, g * 2, b];
      _results.push(p.default_color = p.color);
    }
    return _results;
  };

  CityModel.prototype.draw_mode = function(mode) {
    return this.draw_mode = mode;
  };

  CityModel.prototype.draw_normal_color = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      if (patch.breed.name === "patches") {
        _results.push(patch.color = patch.default_color);
      }
    }
    return _results;
  };

  CityModel.prototype.draw_connectivity_color = function() {
    var patch, _i, _len, _ref, _results;
    _ref = this.patches;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      patch = _ref[_i];
      if (patch.breed.name === "patches") {
        _results.push(patch.color = patch.connectivity_color != null ? patch.connectivity_color : patch.color);
      }
    }
    return _results;
  };

  return CityModel;

})(ABM.Model);
