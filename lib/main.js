// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

require.config({
  paths: {
    'jquery': 'vendor/jquery-2.1.0'
  },
  shim: {
    'jquery': {
      exports: '$'
    }
  }
});

require(['jquery', 'city/CityModel'], function($, CityModel) {
  console.log("Loaded main.coffee");
  return (function($, window) {
    var CitySimulation;
    CitySimulation = (function() {
      CitySimulation.prototype.defaults = {
        paramA: 'foo',
        paramB: 'bar'
      };

      function CitySimulation(el, options) {
        this.options = $.extend({}, this.defaults, options);
        this.$el = $(el);
        this.pause = false;
        this.setup_hotkeys();
        this.setup_model();
        this.setup_buttons();
      }

      CitySimulation.prototype.setup_model = function() {
        this.model = new CityModel(this.$el.attr('id'), 16, -16, 16, -16, 16);
        return this.seed = GPW.pronounceable(8);
      };

      CitySimulation.prototype.run = function() {
        Math.seedrandom(this.seed);
        this.model.debug();
        return this.model.start();
      };

      CitySimulation.prototype.restart = function() {
        Math.seedrandom(this.seed);
        return this.model.reset(true);
      };

      CitySimulation.prototype.play_pause_model = function() {
        if (this.paused) {
          this.model.start();
        } else {
          this.model.stop();
        }
        return this.paused = !this.paused;
      };

      CitySimulation.prototype.set_key_command = function(key, fn) {
        return $(document).bind('keydown', key, fn);
      };

      CitySimulation.prototype.setup_hotkeys = function() {
        return this.set_key_command('r', (function(_this) {
          return function() {
            return _this.restart();
          };
        })(this));
      };

      CitySimulation.prototype.setup_buttons = function() {
        $('#play-pause').click((function(_this) {
          return function() {
            _this.play_pause_model();
            return $('#play-pause span').toggleClass('glyphicon-play').toggleClass('glyphicon-pause');
          };
        })(this));
        $('#reload').click((function(_this) {
          return function() {
            return _this.restart();
          };
        })(this));
        $('button.j-iterate-over').click((function(_this) {
          return function() {
            return _this.animate(parseInt($('input.j-iterate-over').val()));
          };
        })(this));
        return $('button.j-iterate-until').click((function(_this) {
          return function() {
            return _this.animateTo(parseInt($('input.j-iterate-until').val()));
          };
        })(this));
      };

      CitySimulation.prototype.get_model = function() {
        return this.model;
      };

      CitySimulation.prototype.animate = function(ticks) {
        var i;
        this.model.stop();
        i = 0;
        while (i < ticks) {
          this.model.anim.step();
          i += 1;
        }
        return this.model.start();
      };

      CitySimulation.prototype.animateTo = function(ticks) {
        this.model.stop();
        while (this.model.anim.ticks < ticks) {
          this.model.anim.step();
        }
        return this.model.start();
      };

      return CitySimulation;

    })();
    return $.fn.extend({
      CitySimulation: function() {
        var args, option, ret_val;
        option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        ret_val = null;
        this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('CitySimulation');
          if (!data) {
            ret_val = $this.data('CitySimulation', (data = new CitySimulation(this, option)));
          }
          if (typeof option === 'string') {
            return ret_val = data[option].apply(data, args);
          }
        });
        if (ret_val != null) {
          return ret_val;
        } else {
          return $(this);
        }
      }
    });
  })(window.jQuery, window);
});
